<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Geek Dev</title>
  <subtitle>Enjoy Geek Dev Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangbo.tech/"/>
  <updated>2017-01-19T05:57:10.000Z</updated>
  <id>https://yangbo.tech/</id>
  
  <author>
    <name>Yang Bo</name>
    <email>me@yangbo.tech</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Android Studio中发布Library到jCenter本地仓库</title>
    <link href="https://yangbo.tech/2017/01/19/2017-01-19-distribute-android-library-to-local-jCenter/"/>
    <id>https://yangbo.tech/2017/01/19/2017-01-19-distribute-android-library-to-local-jCenter/</id>
    <published>2017-01-19T05:53:00.000Z</published>
    <updated>2017-01-19T05:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h1><p>在<a href="">在Android Studio中发布Library到jCenter公共仓库</a>中，我们知道了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>是如何工作的，也知道了如何向全球公共仓库提交自己的Library。<br>有时我们在添加依赖时还可能添加jCenter之外的仓库，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123; url <span class="string">"http://localhost:8081/artifactory/libs-release-local"</span> &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在此处url是一个本地仓库，也可能是网络的某个位置。<br>就好像github是一个网上的git repo，本地开发环境也有一个完整的git repo一样，jCenter就是这样一个最大的网络repo，同时我们可以利用Bintray提供的开源应用artifactory来搭建本地或团队使用的repo。<br>下图是jFrog BinTray官方提供的artifactory架构图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/19/588055288e190.png" alt="2017-01-19-distribute-android-library-to-local-jCenter/20170119135658729.png" title="">
                </div>
                </figure><br>可以看出，通过artifactory可以与非常多的开发工具进行集成，构建最优的开发流程，与内部用户权限管理整合，提供完整的应用包分发管理。还可以配置同步到jCenter，这也是BinTray设计artifactory的重要一环。</p>
<p>还有其它的库管理应用，因为我们的开发与jCenter尝试整合，就不考虑其它的了，给出列表供参考。<br><a href="https://maven.apache.org/repository-management.html" target="_blank" rel="external">Repository Management Tools</a></p>
<h1 id="搭建artifactory"><a href="#搭建artifactory" class="headerlink" title="搭建artifactory"></a>搭建artifactory</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>artifactory本身是一个开源的Java EE应用，确保机器上有JDK运行，推荐使用最新的JDK8，JDK7官方已不再更新，artifactory也对JDK7支持不好。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  Downloads  java -version</div><div class="line">java version <span class="string">"1.8.0_60"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)</div></pre></td></tr></table></figure></p>
<h2 id="artifactory"><a href="#artifactory" class="headerlink" title="artifactory"></a>artifactory</h2><p>下载<a href="http://www.jfrog.com/open-source/" target="_blank" rel="external">Artifactory</a>后解压zip包，可以直接运行，已包含Tomcat容器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  Downloads  ./artifactory-oss-4.1.3/bin/artifactory.sh</div></pre></td></tr></table></figure></p>
<p>看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###########################################################</span></div><div class="line"><span class="comment">### Artifactory successfully started (4.930 seconds)    ###</span></div><div class="line"><span class="comment">###########################################################</span></div></pre></td></tr></table></figure></p>
<p>Done，本地的artifactory已经运行起来了，浏览器打开<a href="http://localhost:8081/artifactory/" target="_blank" rel="external">http://localhost:8081/artifactory/</a><br>默认的用户名密码是admin/password，可以进行管理，现在先不配置，继续我们的上传进程。</p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><h2 id="配置Gradle"><a href="#配置Gradle" class="headerlink" title="配置Gradle"></a>配置Gradle</h2><p>在Project/build.gradle下添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">    //添加引用位置</div><div class="line">        classpath <span class="string">"org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Library/build.gradle中添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">//plugin要添加到apply plugin: <span class="string">'com.android.library'</span>之后</div><div class="line">//添加上传所需的插件</div><div class="line">apply plugin: <span class="string">'com.jfrog.artifactory'</span></div><div class="line">apply plugin: <span class="string">'maven-publish'</span></div><div class="line">//定义包名和版本号</div><div class="line">def packageName = <span class="string">'com.geek.dev'</span></div><div class="line">def libraryVersion = <span class="string">'1.0.2'</span></div><div class="line"></div><div class="line">publishing &#123;</div><div class="line">    publications &#123;</div><div class="line">        aar(MavenPublication) &#123;</div><div class="line">            groupId packageName</div><div class="line">            version = libraryVersion</div><div class="line">            artifactId project.getName()</div><div class="line"></div><div class="line">            // Tell maven to prepare the generated <span class="string">"*.aar"</span> file <span class="keyword">for</span> publishing</div><div class="line">            artifact(<span class="string">"<span class="variable">$buildDir</span>/outputs/aar/<span class="variable">$&#123;project.getName()&#125;</span>-release.aar"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">artifactory &#123;</div><div class="line">    contextUrl = <span class="string">'http://localhost:8081/artifactory'</span></div><div class="line">    publish &#123;</div><div class="line">        repository &#123;</div><div class="line">            // The Artifactory repository key to publish to</div><div class="line">            repoKey = <span class="string">'libs-release-local'</span></div><div class="line"></div><div class="line">            username = <span class="string">"admin"</span></div><div class="line">            password = <span class="string">"password"</span></div><div class="line">        &#125;</div><div class="line">        defaults &#123;</div><div class="line">            // Tell the Artifactory Plugin <span class="built_in">which</span> artifacts should be published to Artifactory.</div><div class="line">            publications(<span class="string">'aar'</span>)</div><div class="line">            publishArtifacts = <span class="literal">true</span></div><div class="line"></div><div class="line">            // Properties to be attached to the published artifacts.</div><div class="line">            properties = [<span class="string">'qa.level'</span>: <span class="string">'basic'</span>, <span class="string">'dev.team'</span>: <span class="string">'core'</span>]</div><div class="line">            // Publish generated POM files to Artifactory (<span class="literal">true</span> by default)</div><div class="line">            publishPom = <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="运行发布"><a href="#运行发布" class="headerlink" title="运行发布"></a>运行发布</h2><p>在Terminal Panel中运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradle assembleRelease artifactoryPublish</div></pre></td></tr></table></figure></p>
<p>看到发布结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Deploying artifact: http://localhost:8081/artifactory/libs-release-local/com/geek/dev/weatherlib/1.0.2/weatherlib-1.0.2.aar</div><div class="line">Deploying artifact: http://localhost:8081/artifactory/libs-release-local/com/geek/dev/weatherlib/1.0.2/weatherlib-1.0.2.pom</div><div class="line">Deploying build descriptor to: http://localhost:8081/artifactory/api/build</div><div class="line">Build successfully deployed. Browse it <span class="keyword">in</span> Artifactory under http://localhost:8081/artifactory/webapp/builds/WeatherLibrary/1445153016002/2015-10-18T15:23:35.938+0800/</div><div class="line"></div><div class="line">BUILD SUCCESSFUL</div></pre></td></tr></table></figure></p>
<p>到<a href="http://localhost:8081/artifactory/" target="_blank" rel="external">http://localhost:8081/artifactory/</a>里验证：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/distribute_local_artifactory_done.png" alt="distribute" title="">
                </div>
                </figure></p>
<h1 id="使用本地库"><a href="#使用本地库" class="headerlink" title="使用本地库"></a>使用本地库</h1><p>在Project/build.gradle中添加本地库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123; url <span class="string">"http://localhost:8081/artifactory/libs-release-local"</span> &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Module/build.gradle中添加依赖，格式如上图：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</div><div class="line">    compile <span class="string">'com.android.support:appcompat-v7:23.0.1'</span></div><div class="line">    compile(group: <span class="string">'com.geek.dev'</span>, name: <span class="string">'weatherlib'</span>, version: <span class="string">'1.0.2'</span>, ext: <span class="string">'aar'</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过本文的介绍，可以掌握为自己或团队搭建本地库以及让如何使用，系统跑起来了，流程走通了，再进行深入细化，artifactory权限、服务器管理等等。<br>由aar包引用到jcenter()，整个系列囊括了本地文件，网络公共库和本地库，可以将整个Android开发过程中的依赖管理理解的更加深刻，让开发过程变得越来越清晰，整个信息流向越来越透明。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.jfrog.com/wp-content/uploads/2014/05/artifactory_overview_diagram.jpg" target="_blank" rel="external">https://www.jfrog.com/wp-content/uploads/2014/05/artifactory_overview_diagram.jpg</a></p>
<p><a href="https://medium.com/@etiennelawlor/the-complete-guide-to-creating-an-android-library-46628b7fc879#.7nrzoxm1g" target="_blank" rel="external">distribute to maven centeral</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引论&quot;&gt;&lt;a href=&quot;#引论&quot; class=&quot;headerlink&quot; title=&quot;引论&quot;&gt;&lt;/a&gt;引论&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;&quot;&gt;在Android Studio中发布Library到jCenter公共仓库&lt;/a&gt;中，我们知道了&lt;br&gt;&lt;figur
    
    </summary>
    
    
      <category term="Andorid" scheme="https://yangbo.tech/tags/Andorid/"/>
    
      <category term="Gradle" scheme="https://yangbo.tech/tags/Gradle/"/>
    
      <category term="Andorid Studio" scheme="https://yangbo.tech/tags/Andorid-Studio/"/>
    
  </entry>
  
  <entry>
    <title>使用Service worker实现加速/离线访问静态blog网站</title>
    <link href="https://yangbo.tech/2017/01/15/2017-01-15-speedy-and-offline-site-by-service-worker/"/>
    <id>https://yangbo.tech/2017/01/15/2017-01-15-speedy-and-offline-site-by-service-worker/</id>
    <published>2017-01-15T12:59:00.000Z</published>
    <updated>2017-01-15T12:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在很流行基于Github page和markdown的静态blog，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态blog系统出现，如Jekyll/Ruby，Pelican/Python，Hexo/NodeJs，由于静态内容的特性非常适合做缓存来加速页面的访问，就利用<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>来实现加速，结果是除了PageSpeed，CDN这些常见的服务器和网络加速之外，通过客户端实现了更好的访问体验。</p>
<h1 id="加速-离线访问只需三步"><a href="#加速-离线访问只需三步" class="headerlink" title="加速/离线访问只需三步"></a>加速/离线访问只需三步</h1><ul>
<li>首页添加注册代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</div><div class="line"> navigator.serviceWorker.register(<span class="string">'/sw.js'</span>);</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>复制代码</li>
</ul>
<p>将<a href="https://alphayang.github.io/sw.js" target="_blank" rel="external">https://alphayang.github.io/sw.js</a>保存到你的网站根目录下</p>
<ul>
<li>修改不缓存域名列表及离线状态页面</li>
</ul>
<p>在你的sw.js中修改<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ignoreFetch = [</div><div class="line">  <span class="regexp">/https?:\/\/cdn.bootcss.com\//</span>,</div><div class="line">  /https?:\/\/<span class="keyword">static</span>.duoshuo.com\<span class="comment">//,</span></div><div class="line">  /https?:\/\/www.google-analytics.com\<span class="comment">//,</span></div><div class="line">  /https?:\/\/dn-lbstatics.qbox.me\<span class="comment">//,</span></div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>打开<code>Chrome Dev Tools-&gt;Source</code>，看看自己的blog都引用了哪些第三方资源，逐个加到忽略列表里。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/07/587046e64384a.png" alt="speedy-and-offline-site-by-service-worker/20170107093949130.png" title="">
                </div>
                </figure>
<p>在根目录下添加offline.html，在没有网络且缓存中也没有时使用，效果如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/07/58704ddf03f18.png" alt="speedy-and-offline-site-by-service-worker/20170107100934328.png" title="">
                </div>
                </figure></p>
<p>在根目录下添加offline.svg，在无网络时图片资源请求返回该文件。</p>
<h1 id="加速效果"><a href="#加速效果" class="headerlink" title="加速效果"></a>加速效果</h1><p>首页加速后，网络请求从16降为1，加载时间从2.296s降为0.654s，得到了瞬间加载的结果。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/07/5870f7d71e8c6.png" alt="speedy-and-offline-site-by-service-worker/20170107221445109.png" title="">
                </div>
                </figure></p>
<p>基于<a href="https://www.webpagetest.org" target="_blank" rel="external">webpagetest</a></p>
<p>查看<a href="https://www.webpagetest.org/result/170107_CX_J7J/" target="_blank" rel="external">测试结果</a></p>
<h1 id="加速-离线原理探索"><a href="#加速-离线原理探索" class="headerlink" title="加速/离线原理探索"></a>加速/离线原理探索</h1><h2 id="什么是-Service-worker"><a href="#什么是-Service-worker" class="headerlink" title="什么是 Service  worker"></a>什么是 Service  worker</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/05/586ddafe8e0c5.png" alt="speedy-and-offline-site-by-service-worker/20170105133456161.png" title="">
                </div>
                </figure>
<p>如上图，<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a> 是一种由Javascript编写的浏览器端代理脚本，位于你的浏览器和服务器之间。当一个页面注册了一个 <a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>，它就可以注册一系列事件处理器来响应如网络请求和消息推送这些事件。<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a> 可以被用来管理缓存，当响应一个网络请求时可以配置为返回缓存还是从网络获取。由于<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a> <strong>是基于事件的，所以它只在处理这些事件的时候被调入内存，不用担心常驻内存占用资源导致系统变慢。</strong></p>
<h3 id="Service-worker生命周期"><a href="#Service-worker生命周期" class="headerlink" title="Service worker生命周期"></a>Service worker生命周期</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/05/586de05e383cf.png" alt="speedy-and-offline-site-by-service-worker/20170105135752765.png" title="">
                </div>
                </figure>
<p><a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a> 为网页添加一个类似于<strong>APP</strong>的生命周期，它只会响应<strong>系统</strong>事件，就算浏览器关闭时<strong>操作系统</strong>也可以唤醒<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>，这点非常<strong>重要</strong>，让web app与native app的能力变得类似了。</p>
<p><a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>在Register时会触发Install事件，在Install时可以用来预先获取和缓存应用所需的资源并设置每个文件的缓存策略。</p>
<p>一旦<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>处于activated状态，就可以完全控制应用的资源，对网络请求进行检查，修改网络请求，从网络上获取并返回内容或是返回由已安装的<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>预告获取并缓存好的资源，甚至还可以生成内容并返回给网络语法。</p>
<p>所有的这些都用户都是透明的，事实上，一个设计优秀的<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>就像一个智能缓存系统，加强了网络和缓存功能，选择最优方式来响应网络请求，让应用更加稳定的运行，就算没有网络也没关系，因为你可以完全控制网络响应。</p>
<h2 id="Service-worker的控制从第二次页面访问开始"><a href="#Service-worker的控制从第二次页面访问开始" class="headerlink" title="Service worker的控制从第二次页面访问开始"></a>Service worker的控制从第二次页面访问开始</h2><p>在首次加载页面时，所有资源都是从网络载的，<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a> 在首次加载时不会获取控制网络响应，它只会在后续访问页面时起作用。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/05/586de77f9297c.png" alt="speedy-and-offline-site-by-service-worker/20170105142817967.png" title="">
                </div>
                </figure><br>页面首次加载时完成install，并进入idle状态。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/05/586de7c4a0b34.png" alt="speedy-and-offline-site-by-service-worker/2017010514292700.png" title="">
                </div>
                </figure>
<p>页面第二次加载时，进入activated状态，准备处理所有的事件，<strong>同时</strong> 浏览器会向服务器发送一个<strong>异步</strong> 请求来检查<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>本身是否有新的版本，构成了<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>的更新机制。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/05/586de951c6b2c.png" alt="speedy-and-offline-site-by-service-worker/20170105143604211.png" title="">
                </div>
                </figure><br>当<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>处理完所有的事件后，进入idle状态，最终进入terminated状态资源被释放，当有新的事件发生时再度被调用。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>浏览器</li>
</ul>
<p>Google Chrome，Firefox，Opera以及国内的各种双核浏览器都支持，但是 safari 不支持，那么在不支持的浏览器里<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>不工作。</p>
<ul>
<li>https</li>
</ul>
<p>网站必须启用https来保证使用<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>页面的安全性，开发时localhost默认认为是安全的。</p>
<ul>
<li>non-block</li>
</ul>
<p><a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a> 中的 Javascript 代码必须是非阻塞的，因为 localStorage 是阻塞性，所以不应该在 Service Worker 代码中使用 localStorage。</p>
<ul>
<li>单独的执行环境</li>
</ul>
<p><a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>运行在自己的全局环境中，通常也运行在自己单独的线程中。</p>
<ul>
<li>没有绑定到特定页面</li>
</ul>
<p><em>service work</em>能控制它所加载的整个范围内的资源。</p>
<ul>
<li>不能操作DOM</li>
</ul>
<p>跟DOM所处的环境是相互隔离的。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/07/58701d73034db.png" alt="speedy-and-offline-site-by-service-worker/20170107064257269.png" title="">
                </div>
                </figure></p>
<ul>
<li>没有浏览页面时也可以运行</li>
</ul>
<p>接收系统事件，后台运行</p>
<ul>
<li>事件驱动，需要时运行，不需要时就终止</li>
</ul>
<p>按需执行，只在需要时加载到内存</p>
<ul>
<li>可升级</li>
</ul>
<p>执行时会异步获取最新的版本</p>
<h2 id="实现加速-离线"><a href="#实现加速-离线" class="headerlink" title="实现加速/离线"></a>实现加速/离线</h2><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>网页缓存有很多，如HTTP缓存，localStorage，sessionStorage和cacheStorage都可以灵活搭配进行缓存，但操作太繁琐，直接使用更高级<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a> –本文的主人公。</p>
<h3 id="添加Service-worker入口"><a href="#添加Service-worker入口" class="headerlink" title="添加Service worker入口"></a>添加Service worker入口</h3><p>在web app的首页添加以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</div><div class="line"> navigator.serviceWorker.register(<span class="string">'/sw.js'</span>);</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果浏览器支持<kbd>serviceWorker</kbd>就注册它，不支持还是正常浏览，没有<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>所提供的增强功能。</p>
<p><kbd>Service worker控制范围：</kbd><br>简单情况下，将<code>sw.js</code>放在网站的根目录下，这样<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>可以控制网站所有的页面，，同理，如果把<code>sw.js</code>放在<code>/my-app/sw.js</code>那么它只能控制<code>my-app</code>目录下的页面。<br>把<code>sw.js</code>放在<code>/js/</code>目录呢？更好的目录结构和范围控制呢？<br>在注册时指定js位置并设置范围。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">navigator.serviceWorker.register(<span class="string">'/js/sw.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'/sw-test/'</span>&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</div><div class="line">      <span class="comment">// Registration was successful</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration successful with scope: '</span>, registration.scope);</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="comment">// registration failed :(</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration failed: '</span>, err);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Service-worker实现"><a href="#Service-worker实现" class="headerlink" title="Service worker实现"></a>Service worker实现</h3><p>监听三个事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">self.addEventListener(<span class="string">'install'</span>, onInstall);</div><div class="line"></div><div class="line">self.addEventListener(<span class="string">'fetch'</span>, onFetch);</div><div class="line"></div><div class="line">self.addEventListener(<span class="string">"activate"</span>, onActivate);</div></pre></td></tr></table></figure></p>
<h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//////////</span></div><div class="line"><span class="comment">// Install</span></div><div class="line"><span class="comment">//////////</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onInstall</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  log(<span class="string">'install event in progress.'</span>);</div><div class="line"></div><div class="line">  event.waitUntil(updateStaticCache());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateStaticCache</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> caches</div><div class="line">    .open(cacheKey(<span class="string">'offline'</span>))</div><div class="line">    .then(<span class="function">(<span class="params">cache</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> cache.addAll(offlineResources);</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      log(<span class="string">'installation complete!'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>install时将所有符合缓存策略的资源进行缓存。</p>
<h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">////////</span></div><div class="line"><span class="comment">// Fetch</span></div><div class="line"><span class="comment">////////</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onFetch</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> request = event.request;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (shouldAlwaysFetch(request)) &#123;</div><div class="line">    event.respondWith(networkedOrOffline(request));</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (shouldFetchAndCache(request)) &#123;</div><div class="line">    event.respondWith(networkedOrCached(request));</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  event.respondWith(cachedOrNetworked(request));</div><div class="line">&#125;</div><div class="line">onFetch做为浏览器网络请求的代理，根据需要返回网络或缓存内容，如果获取了网络内容，返回网络请求时同时进行缓存操作。</div></pre></td></tr></table></figure>
<h4 id="activate"><a href="#activate" class="headerlink" title="activate"></a>activate</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///////////</span></div><div class="line"><span class="comment">// Activate</span></div><div class="line"><span class="comment">///////////</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onActivate</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  log(<span class="string">'activate event in progress.'</span>);</div><div class="line">  event.waitUntil(removeOldCache());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeOldCache</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> caches</div><div class="line">    .keys()</div><div class="line">    .then(<span class="function">(<span class="params">keys</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all( <span class="comment">// We return a promise that settles when all outdated caches are deleted.</span></div><div class="line">        keys</div><div class="line">         .filter(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</div><div class="line">           <span class="keyword">return</span> !key.startsWith(version); <span class="comment">// Filter by keys that don't start with the latest version prefix.</span></div><div class="line">         &#125;)</div><div class="line">         .map(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</div><div class="line">           <span class="keyword">return</span> caches.delete(key); <span class="comment">// Return a promise that's fulfilled when each outdated cache is deleted.</span></div><div class="line">         &#125;)</div><div class="line">      );</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      log(<span class="string">'removeOldCache completed.'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在activate时根据version值来删除过期的缓存。</p>
<h2 id="管理-Service-worker"><a href="#管理-Service-worker" class="headerlink" title="管理 Service worker"></a>管理 Service worker</h2><h3 id="特定网站"><a href="#特定网站" class="headerlink" title="特定网站"></a>特定网站</h3><ol>
<li>Google Chrome</li>
</ol>
<p><code>Developer Tools</code>-&gt;<code>Application</code>-&gt;<code>Service Workers</code>，<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/07/58704cdb8326b.png" alt="speedy-and-offline-site-by-service-worker/20170107100514876.png" title="">
                </div>
                </figure></p>
<p>在这里还有三个非常有用的复选框：</p>
<ul>
<li>Offline</li>
</ul>
<p>模拟断网状态</p>
<ul>
<li><p>Update on reload<br>加载时更新</p>
</li>
<li><p>Bypass for network<br>总是使用网络内容</p>
</li>
</ul>
<ol>
<li>Firefox</li>
</ol>
<p>只有在Settings里有一个可以在HTTP环境中使用<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>的选项，适应于调试，没有单独网站下的<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>管理。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/07/587051f5ec951.png" alt="speedy-and-offline-site-by-service-worker/20170107102700440.png" title="">
                </div>
                </figure></p>
<ol>
<li>Opera及其它双核浏览器同Google  Chrome<br>如果看到多个相同范围内的多个<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>，说明<em>Service woker</em>更新后，而原有<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>还没有被terminated。</li>
</ol>
<h3 id="浏览器全局"><a href="#浏览器全局" class="headerlink" title="浏览器全局"></a>浏览器全局</h3><p>看看你的浏览器里都有哪些Service worker已经存在了</p>
<ol>
<li>Google Chrome</li>
</ol>
<p>在地址栏里输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome://serviceworker-internals/</div></pre></td></tr></table></figure></p>
<p>可以看到已经有24个Service worker了，在这里可以手动Start让它工作，也可以Unregister卸载掉。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/06/586f9ca83b7a1.png" alt="speedy-and-offline-site-by-service-worker/20170106213323480.png" title="">
                </div>
                </figure></p>
<ol>
<li>Firefox</li>
</ol>
<p>有两种方式进入<a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="external"><em>Service worker</em></a>管理界面来手动Start或unregister。</p>
<ul>
<li><p>菜单栏，Tool-&gt;Web Developer-&gt;Service workers</p>
</li>
<li><p>地址栏中输入</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">about:debugging#workers</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/06/586f9d48f09a8.png" alt="speedy-and-offline-site-by-service-worker/20170106213558243.png" title="">
                </div>
                </figure>
<ol>
<li>Opera及其它双核浏览器同Google  Chrome</li>
</ol>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>TODO:</p>
<ul>
<li><p><em>Service workers</em>的更新需要手动编辑version，每次发布新文章时需要编辑。</p>
</li>
<li><p>使用<a href="https://www.ampproject.org/" target="_blank" rel="external">AMP</a>让页面渲染速度达到最高。</p>
</li>
</ul>
<h1 id="Ref-links"><a href="#Ref-links" class="headerlink" title="Ref links"></a>Ref links</h1><p><a href="https://serviceworke.rs/" target="_blank" rel="external">Service Worker Cookbook</a></p>
<p><a href="https://jakearchibald.github.io/isserviceworkerready/" target="_blank" rel="external">Is service worker ready?</a></p>
<p><a href="https://www.chromestatus.com/features" target="_blank" rel="external">Chrome service worker status page</a></p>
<p><a href="https://platform-status.mozilla.org/#service-worker" target="_blank" rel="external">Firefox service worker status page</a></p>
<p><a href="https://dev.windows.com/en-us/microsoft-edge/platform/status/serviceworker" target="_blank" rel="external">MS Edge service worker status page</a></p>
<p><a href="https://webkit.org/status/#specification-service-workers" target="_blank" rel="external">WebKit service worker status page</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很流行基于Github page和markdown的静态blog，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态blog系统出现，如Jekyll/Ruby，Pelican/Python，Hexo/NodeJs，由于静态内容的特性非常适合做缓存来加速页面的访问
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tango+Daydream，刀剑合璧的Android VR开发</title>
    <link href="https://yangbo.tech/2017/01/03/2017-01-03-tango-with-daydream-is-coming/"/>
    <id>https://yangbo.tech/2017/01/03/2017-01-03-tango-with-daydream-is-coming/</id>
    <published>2017-01-03T06:48:00.000Z</published>
    <updated>2017-01-10T08:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着ASUS在CES2017上宣布了全球第一款同时具有Tango和Daydream两种能力的ZenFone AR，终于使得AR/VR/MR这些近来全球开发圈内超级热门的词汇可以让我们国内的Android开发者直接利用手中的Android Studio和方便入手的Android设备来进行虚拟开发的探索了！</p>
<h1 id="三种交互"><a href="#三种交互" class="headerlink" title="三种交互"></a>三种交互</h1><h2 id="AR"><a href="#AR" class="headerlink" title="AR"></a>AR</h2><p>增强现实，人眼接受到的光线包括了现实的光和AR设备屏幕发出的光，通过人眼的处理能力进行合成，增强现实感。<br>Phab 2 Pro就是一款AR设备，可以拍摄可爱的小猫或小狗跟小宝宝一起玩的照片而不用担心安全，因为小动物都是虚拟的。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b50fe02edc.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103152130444.png" title="">
                </div>
                </figure></p>
<h2 id="VR"><a href="#VR" class="headerlink" title="VR"></a>VR</h2><p>虚拟现在，使用头盔或Cardboard完全遮挡住现实的光线，人眼只接受VR设备发出的光，跟现实完全隔离。<br>Oculus Rift， PlayStation VR， Samsung Gear VR 以及 HTC Vive都属于此类设备。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b5782be50c.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103154906634.png" title="">
                </div>
                </figure></p>
<h2 id="MR"><a href="#MR" class="headerlink" title="MR"></a>MR</h2><p>混合现实，MR设备自身具有三维坐标感知能力，随着人的移动，虚拟物体的显示也随着变化。<br>Hololens属于MR设备。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b591c371bd.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103155611338.png" title="">
                </div>
                </figure></p>
<h1 id="两大技术"><a href="#两大技术" class="headerlink" title="两大技术"></a>两大技术</h1><h2 id="Tango（屠龙"><a href="#Tango（屠龙" class="headerlink" title="Tango（屠龙)"></a>Tango（屠龙)</h2><p>正如2000年时Sumsung在SCH-V200手机上上添加了摄像头，手机开始了睁眼看世界的能力，现在Tango摄像头为手机添加了真实三维世界的感知能力。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/04/586c8783658a8.png" alt="2017-01-03-tango-with-daydream-is-coming/20170104132625731.png" title="">
                </div>
                </figure><br>简单的讲，Tango具有以下三大功能：</p>
<ul>
<li>Motion tracking: 我在哪里，空间位置</li>
<li>Area learning: 前边有什么，看到什么</li>
<li>Depth perception: 前边有多远<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b5b2555e34.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103160452943.png" title="">
                </div>
                </figure>
不论是使用ToF(Time of Flight)，通过传感器发出经调制的近红外光，遇物体后反射，传感器通过计算光线发射和反射时间差或相位差，来换算被拍摄景物的距离，以产生深度信息。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b6b8c5dcfa.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103171451342.png" title="">
                </div>
                </figure>
还是结构光计算，通过向检测空间内投射经过编码的激光光斑阵列，对空间进行标定并辅助计算三维空间位置。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b6c59bd121.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103171814160.png" title="">
                </div>
                </figure>
</li>
</ul>
<p>所得到的如下图中的cloud point数据，可以看到此时共采集到了12464个带有XYZ三维坐标的点。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b6b35a54c0.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103171324338.png" title="">
                </div>
                </figure></p>
<h2 id="Daydream-倚天"><a href="#Daydream-倚天" class="headerlink" title="Daydream(倚天)"></a>Daydream(倚天)</h2><p>目的是要让用户得到最好的虚拟体验，通过定义了一组最低的硬件运行效果标准以及为开发者提供易用的Daydream API，消除了导致用户眩晕的画面延迟，做到最高性价比的虚拟体验。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b5b0519d91.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103160420398.png" title="">
                </div>
                </figure></p>
<h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><h2 id="Phab-2-Pro"><a href="#Phab-2-Pro" class="headerlink" title="Phab 2 Pro"></a>Phab 2 Pro</h2><p>全球第一款消费级的Tango设备，使用骁龙652，4G内存和64G存储，重要的是国内版本和国外版本都具有完整的Tango功能。京东上可以直接下单，支持211的！<br>缺点是作为普通手机使用，6.4寸屏幕太大，顔值也不够高，整体偏笨。<br>Android感知三维世界的”眼睛”–Tango组件:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b507a19e3d.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103151919100.png" title="">
                </div>
                </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b5171e0017.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103152329144.png" title="">
                </div>
                </figure><br>典型的应用场景:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b50fe02edc.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103152130444.png" title="">
                </div>
                </figure></p>
<h2 id="ZenFone-AR"><a href="#ZenFone-AR" class="headerlink" title="ZenFone AR"></a>ZenFone AR</h2><p>全球第一款消费级的Tango+Daydream设备，使用骁龙821来保证用户得到Daydream体验，第一款Daydream手机Google Pixel和Asus Zenphone 3也使用的是骁龙821。由于Daydream Viewer现在兼容的手机尺寸是5.0到5.7寸屏，那么ZenFone AR搭配Android 7(Nougat)的5.7寸屏用起来应当是相当顺手的。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b4feda8e08.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103151700773.png" title="">
                </div>
                </figure></p>
<h1 id="Tango开发"><a href="#Tango开发" class="headerlink" title="Tango开发"></a>Tango开发</h1><p>首先，你需要一款Tango设备，因为<strong>还没有</strong>可以模拟Tango相关摄像头硬件的模拟器，上节中 <strong>Phab 2 Pro</strong> 是很不错的开发机！<br>现在以Java API开发为例来进入Tango APP的开发，如果你熟悉Unity 3D的开发，就直接用Unity 3D的package，因为80%的Tango APP都是用Unity 3D开发的，当然最多的就是游戏啦！</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="Android-Studio-2-2"><a href="#Android-Studio-2-2" class="headerlink" title="Android Studio 2.2"></a>Android Studio 2.2</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b8f5c66b47.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103194739549.png" title="">
                </div>
                </figure>
<h3 id="USB-debugging"><a href="#USB-debugging" class="headerlink" title="USB debugging"></a>USB debugging</h3><p>Phab 2 Pro开启Developer option中的USB debugging，没有Developer option，那你肯定是Android开发新手，在Settings-&gt;About phone下连续点击7次Builｄ number就可以召唤出Developer option了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b8fa716157.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103194853830.png" title="">
                </div>
                </figure></p>
<h2 id="获取示例代码"><a href="#获取示例代码" class="headerlink" title="获取示例代码"></a>获取示例代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/googlesamples/tango-examples-java.git</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b9096bf8c7.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103195252363.png" title="">
                </div>
                </figure>
<h2 id="打开Java-Cloud-point-example"><a href="#打开Java-Cloud-point-example" class="headerlink" title="打开Java Cloud point example"></a>打开Java Cloud point example</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b915f967ee.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103195614492.png" title="">
                </div>
                </figure>
<p>直接 control + R<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b91a828f5b.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103195727424.png" title="">
                </div>
                </figure><br>选择Phab 2 Pro<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b91d009346.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103195807115.png" title="">
                </div>
                </figure><br>如果出现以下错误:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed <span class="keyword">for</span> task <span class="string">':app:transformNative_libsWithStripDebugSymbolForDebug'</span>.</div><div class="line">&gt; java.lang.NullPointerException (no error message)</div></pre></td></tr></table></figure></p>
<p>只需要将compileSdkVersion和targetSdkVersion的版本号跟buildToolsVersion保持一致。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b941ebc5b9.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103200757443.png" title="">
                </div>
                </figure></p>
<p>安装成功<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b946c4f78e.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103200911758.png" title="">
                </div>
                </figure><br>在手机上可以看到Cloud point，实时的总点数和点的平均深度。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b94b3f2c22.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103201026653.png" title="">
                </div>
                </figure></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p><a href="https://github.com/lvonasek/tango/" target="_blank" rel="external">https://github.com/lvonasek/tango/</a><br>利用C API对采集到的Point cloud进行处理，实现三维重建的APP。<br>近似的扫描效果:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b962ae7e8e.png" alt="2017-01-03-tango-with-daydream-is-coming/2017010320163332.png" title="">
                </div>
                </figure></p>
<h1 id="Daydream开发"><a href="#Daydream开发" class="headerlink" title="Daydream开发"></a>Daydream开发</h1><p>再来重温下Daydream的目的，可以简单看到是Cardboard的升级版本，但却定义了一个可以满足用户体验的最低硬件标准并开发了一整套API来让开发者可以方便的开发出高质量体验的应用。<br>同样的Daydream APP需要一个Daydream ready的手机来运行或可以运行Cardboard apps且大于Android 4.4(kitkat)的手机，这里同样使用Phab 2 Pro。<br>使用Daydream主要用来完成以下开发任务:</p>
<ul>
<li>Lens distortion correction.</li>
<li>Spatial audio.</li>
<li>Head tracking.</li>
<li>3D calibration.</li>
<li>Side-by-side rendering.</li>
<li>Stereo geometry configuration.</li>
<li>User input event handling.</li>
</ul>
<h2 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/googlevr/gvr-android-sdk.git</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b9aead56d5.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103203649160.png" title="">
                </div>
                </figure>
<h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><p>打开gvr-android-sdk<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b9b78a3a3d.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103203908964.png" title="">
                </div>
                </figure><br>运行（ control + R）sample-sdk-treasurehunt<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b9dc872bf3.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103204906349.png" title="">
                </div>
                </figure><br>选择 Phab 2 Pro<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b9e092a637.png" alt="2017-01-03-tango-with-daydream-is-coming/2017010320501196.png" title="">
                </div>
                </figure><br>在手机上配合Cardboard或Daydream Viewer(当然国内的各种盒子也是可以的，由于Daydream Viewer自由没有添加计算能力，只是在操作手柄上加了外置九轴惯性测量单元来辅助精确追踪)<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://ooo.0o0.ooo/2017/01/03/586b9ea96e14e.png" alt="2017-01-03-tango-with-daydream-is-coming/20170103205247126.png" title="">
                </div>
                </figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用ZenFone AR和Daydream Viewer，预计总价不会超过人民币5000元，就可以不用拖长长的连接线，也不用再专门配备一个高性能主机，在家里完全自由的沉浸在Google Street View， YouTube， Netflix， Hulu，  HBO以及诸如 Fantastic Beasts ， Where to Find Them， Need for Speed和Gunjack 2这些VR游戏中，不是安静的坐着，而是360度的自由视角。<br>完美VR的硬件和API已经准备好了，着手自己的开发计划吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着ASUS在CES2017上宣布了全球第一款同时具有Tango和Daydream两种能力的ZenFone AR，终于使得AR/VR/MR这些近来全球开发圈内超级热门的词汇可以让我们国内的Android开发者直接利用手中的Android Studio和方便入手的Androi
    
    </summary>
    
    
      <category term="Andorid" scheme="https://yangbo.tech/tags/Andorid/"/>
    
      <category term="Tango" scheme="https://yangbo.tech/tags/Tango/"/>
    
      <category term="Daydream" scheme="https://yangbo.tech/tags/Daydream/"/>
    
      <category term="VR" scheme="https://yangbo.tech/tags/VR/"/>
    
      <category term="Gradle" scheme="https://yangbo.tech/tags/Gradle/"/>
    
      <category term="Andorid Studio" scheme="https://yangbo.tech/tags/Andorid-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android Things-物联网开发</title>
    <link href="https://yangbo.tech/2016/12/24/android-things-for-iot-era/"/>
    <id>https://yangbo.tech/2016/12/24/android-things-for-iot-era/</id>
    <published>2016-12-24T00:50:09.000Z</published>
    <updated>2017-01-06T13:29:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Things正式接替Brillo亮相，名称的改变带来了什么新的内容，广大Android开发者如何进入这一新的领域，通过本文，你不仅会了解Android Things的来龙去脉，也会直接通过代码来体验开发带给你的魅力。</p>
<h1 id="Android-Everywhere"><a href="#Android-Everywhere" class="headerlink" title="Android Everywhere"></a>Android Everywhere</h1><p>一张Google IO 2015上的旧图，清晰的展示了Android的历史和未来。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825416438921.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14829170702041.jpg" alt="" title="">
                </div>
                </figure>
<p>处于中心的Android Mobile，已经占据了全球手机市场绝大多数份额，几十亿部Android手机，构成了Android生态系统最坚实的基础。</p>
<h2 id="Android-TV"><a href="#Android-TV" class="headerlink" title="Android TV"></a>Android TV</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14829170626446.jpg" alt="" title="">
                </div>
                </figure>
<p>随着着电视大屏发展的脚步，Android TV也成了所有电视盒子和智能电视的不二之选，主要归功于Android硬件系统的开放、庞大的开发者群体、完整的工具链。如果说手机端还有iOS将近20%的份额，在TV端，目测tvOS不到2%，Android TV也就代表了整个智能电视，国内更是100%的Android TV,Apple TV没有国行版本。</p>
<h2 id="Android-Wear"><a href="#Android-Wear" class="headerlink" title="Android Wear"></a>Android Wear</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14829170553859.jpg" alt="" title="">
                </div>
                </figure>
<p>让你的应用跑在手表上，同样使用熟悉的开发工具，主要是面向海外的应用，由于国内Android Mobile严重分裂，而Android Wear需要依赖手机的支持。</p>
<h2 id="Android-Auto"><a href="#Android-Auto" class="headerlink" title="Android Auto"></a>Android Auto</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14829170440133.jpg" alt="" title="">
                </div>
                </figure>
<p>针对汽车的使用场景进行优化，有了Android Auto就不用上车后就是找电源线，然后开导航，再把手机放到各种架子上，而是直接把Android Mobile放到原生底座上，直接使用语音和易操作的中控大屏。</p>
<h2 id="Android-Chromebook"><a href="#Android-Chromebook" class="headerlink" title="Android Chromebook"></a>Android Chromebook</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14829170194979.jpg" alt="" title="">
                </div>
                </figure>
<p>从 Chrome 操作系统版本 M53 开始，可以直接使用Chromebook中的Google Play Store下载和使用Android应用，现在使用的Google Chrome版本是55，那么绝大多数已有Chromebook都已经支持Android应用，新的Chromebook自然都会支持。<br><a href="https://developer.android.com/topic/arc/index.html" target="_blank" rel="external">针对 Chromebook 优化应用</a><br><a href="https://www.chromium.org/chromium-os/chrome-os-systems-supporting-android-apps" target="_blank" rel="external">支持Android应用的Chromebook列表</a><br>Android和Chrome两大系统的合并，除了带来了Android丰富的应用以外，对于用户最大的好处就是自动更新了，Chrome自动下载更新，下次重新打开/启动时自动应用更新，从Android Nougat开始，Android系统也将使用这种更新机制。<br>根据<a href="http://www.theverge.com/2016/5/19/11711714/chromebooks-outsold-macs-us-idc-figures" target="_blank" rel="external">IDC报告</a>,Chromebook在2016年第一季度的出货量已经在美国市场超越了Mac，特别是由于教育市场的大量需求。<br>这里，还要注意,Chromebook使用的Chrome OS和Google Chrome高度共享代码，既然Android应用可以在Chromebook上运行，当未来在Mac/Windows/Linux上可以时，你也不要感到惊讶。</p>
<h2 id="Android-Things"><a href="#Android-Things" class="headerlink" title="Android Things"></a>Android Things</h2><p>终于到了今天的主角登场，Android Things！先看外表。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825453655189.jpg" alt="" title="">
                </div>
                </figure></p>
<p>再看内部核心硬件。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825448372155.jpg" alt="" title="">
                </div>
                </figure></p>
<p>它的愿景就是将无数的的设备连接起来，Android Things作为物联网的大脑，使用公开协议<a href="https://alphayang.github.io/2015/10/30/all-about-brillo-and-weave/" target="_blank" rel="external">Weave</a>与广大的传感器/外部设备进行对话。<br>不像Android其它系统，Android Things大多数情况下只在后台以服务方式运行，没有显示屏，默默的与打印机、门锁、烤箱、灯泡、插座这些设备一起提供服务。</p>
<h1 id="Android-Things全解析"><a href="#Android-Things全解析" class="headerlink" title="Android Things全解析"></a>Android Things全解析</h1><p>##　Android Things架构</p>
<p>先看Brillo和Android Things的架构图进行对比。<br>这是Brillo，<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825452661795.jpg" alt="" title="">
                </div>
                </figure><br>这是Android Things，<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825452944655.jpg" alt="" title="">
                </div>
                </figure></p>
<p>可以很清楚的看出来：</p>
<ul>
<li>Brillo使用C/C++基于NDK进行开发,Android Things通过Java API面向广大的Android和Java开发者，就算是新手，Android的也是极易上手的。各位苦于嵌入式开发各种工具坑的福音到了，对于性能和底层要求高的部分仍然可以用NDK编写，在Android Studio里调试NDK代码也和Java代码一样的简单。</li>
<li>Android Studio，Android SDK，Play service和Firebase,这些工具和Service形成了完整易用的工具链。</li>
<li>Android Things出生最晚，更新条件也是最好的，直接使用Android Nougat的自动后台更新机制，最大限度的提高系统的安全性。<br>##广泛的硬件平台支持<br>现在支持以下3款硬件<br><a href="https://developer.android.com/things/hardware/edison.html" target="_blank" rel="external">Intel Edison</a><br>开发版中的贵族。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14827190513384.png" alt="" title="">
                </div>
                </figure>
<a href="https://developer.android.com/things/hardware/edison.html" target="_blank" rel="external">NXP Pico</a><br>中规中矩的中间阶层。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14827188154251.png" alt="" title="">
                </div>
                </figure>
</li>
</ul>
<p><a href="https://developer.android.com/things/hardware/raspberrypi.html" target="_blank" rel="external">Raspberry Pi 3</a><br>少了草根精英树莓派怎么行。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14827189953432.png" alt="" title="">
                </div>
                </figure></p>
<h1 id="Hello-Android-Things"><a href="#Hello-Android-Things" class="headerlink" title="Hello Android Things"></a>Hello Android Things</h1><p>买到的开发版都是没有装操作系统系统的，第一步先把Android Things刷到板子里。</p>
<h2 id="Flash-image-刷机"><a href="#Flash-image-刷机" class="headerlink" title="Flash image(刷机)"></a>Flash image(刷机)</h2><p><a href="https://developer.android.com/things/hardware/index.html" target="_blank" rel="external">官方刷机教程</a><br>以Intel Edison为例:<br>0.Android SDK Platform Tools 25.0.3以上，fastboot工具添加到PATH环境变量中，以便从任意目录运行。<br>1.下载后打Intel Flash Tool，加打开下载好的对应刷机包。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825482944588.jpg" alt="" title="">
                </div>
                </figure></p>
<ol>
<li><p>使用USB线链接Edison，如果Edison没有显示，换USB口和线试试。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825484418536.jpg" alt="" title="">
                </div>
                </figure>
</li>
<li><p>Start to Flash（开始刷机）</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825485077055.jpg" alt="" title="">
                </div>
                </figure>
</li>
</ol>
<p>4.使用Fastboot刷入系统镜像，此时需要几十秒，光System.img就有500多M。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825487342056.jpg" alt="" title="">
                </div>
                </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825489744413.jpg" alt="" title="">
                </div>
                </figure><br>5.刷入Google Service镜像。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825490058992.jpg" alt="" title="">
                </div>
                </figure><br>6.刷入OEM镜像。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825490371488.jpg" alt="" title="">
                </div>
                </figure><br>7.重启</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fastboot reboot</div></pre></td></tr></table></figure>
<p>8.验证系统状态。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825491377983.jpg" alt="" title="">
                </div>
                </figure><br>如果出现以下Error，把Intel Flash Tool关掉，重新连接下USB。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List of devices attached</div><div class="line">adb server version (35) doesn<span class="string">'t match this client (36); killing...</span></div><div class="line">adb E 69469 2714428 usb_osx.cpp:327] Could not open interface: e00002c5</div><div class="line">adb E 69469 2714428 usb_osx.cpp:289] Could not find device interface</div><div class="line">error: could not install *smartsocket* listener: Address already in use</div><div class="line">ADB server didn't ACK</div><div class="line">*   failed to start daemon *</div><div class="line">error: cannot connect to daemon</div></pre></td></tr></table></figure></p>
<h2 id="Connecting-WIFI-联网"><a href="#Connecting-WIFI-联网" class="headerlink" title="Connecting WIFI(联网)"></a>Connecting WIFI(联网)</h2><p>依然是熟悉的adb命令和服务启动参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ adb shell am startservice \</div><div class="line">    -n com.google.wifisetup/.WifiSetupService \</div><div class="line">    <span class="_">-a</span> WifiSetupService.Connect \</div><div class="line">    <span class="_">-e</span> ssid SSID \</div><div class="line">    <span class="_">-e</span> passphrase password</div></pre></td></tr></table></figure></p>
<p>用logcat查看网络状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ adb logcat <span class="_">-d</span> | grep Wifi</div><div class="line">...</div><div class="line">V WifiWatcher: Network state changed to CONNECTED</div><div class="line">V WifiWatcher: SSID changed: ...</div><div class="line">I WifiConfigurator: Successfully connected to ...</div></pre></td></tr></table></figure></p>
<p>Ping检测<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ adb shell ping 114.114.114.114</div><div class="line">PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.</div><div class="line">64 bytes from 114.114.114.114: icmp_seq=1 ttl=57 time=6.67 ms</div><div class="line">64 bytes from 114.114.114.114: icmp_seq=2 ttl=57 time=55.5 ms</div><div class="line">64 bytes from 114.114.114.114: icmp_seq=3 ttl=57 time=23.0 ms</div><div class="line">64 bytes from 114.114.114.114: icmp_seq=4 ttl=57 time=245 ms</div></pre></td></tr></table></figure></p>
<h2 id="Hello-Android-Things项目"><a href="#Hello-Android-Things项目" class="headerlink" title="Hello Android Things项目"></a>Hello Android Things项目</h2><h3 id="Android-Studio中新建项目"><a href="#Android-Studio中新建项目" class="headerlink" title="Android Studio中新建项目"></a>Android Studio中新建项目</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825493309616.jpg" alt="" title="">
                </div>
                </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825493507447.jpg" alt="" title="">
                </div>
                </figure>
<p>在build.gralde中添加依赖com.google.android.things:androidthings<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">25</span></div><div class="line">    buildToolsVersion <span class="string">"25.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.geekdev.alpha.androidthings"</span></div><div class="line">        minSdkVersion <span class="number">24</span></div><div class="line">        targetSdkVersion <span class="number">25</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="literal">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</div><div class="line">    androidTestCompile(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</div><div class="line">        exclude <span class="string">group:</span> <span class="string">'com.android.support'</span>, <span class="string">module:</span> <span class="string">'support-annotations'</span></div><div class="line">    &#125;)</div><div class="line">    provided <span class="string">'com.google.android.things:androidthings:0.1-devpreview'</span></div><div class="line">    compile <span class="string">'com.google.android.things.contrib:driver-button:0.1'</span></div><div class="line">    compile <span class="string">'com.android.support:appcompat-v7:25.1.0'</span></div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此处依赖方式是provided，让Android Things使用系统中的库。</p>
<h3 id="添加activity"><a href="#添加activity" class="headerlink" title="添加activity"></a>添加activity</h3><p>添加一个主activity并配置AndroidManifest.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.geekdev.alpha.androidthings"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">    <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-library</span> <span class="attr">android:name</span>=<span class="string">"com.google.android.things"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.IOT_LAUNCHER"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在Activity中输出Hello Android Things<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    Log.d(TAG, <span class="string">"Hello Android Things!"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="运行输出"><a href="#运行输出" class="headerlink" title="运行输出"></a>运行输出</h3><p>直接Command+R，可以在logcat窗口中看到结果了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825497185723.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="Peripheral-I-O"><a href="#Peripheral-I-O" class="headerlink" title="Peripheral I/O"></a>Peripheral I/O</h1><p>不满足于Hello Android Things，继续来使用Android Things对外设进行操作。<br>使用Button driver对LED灯进行开关操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekdev.alpha.androidthings;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.KeyEvent;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.android.things.contrib.driver.button.ButtonInputDriver;</div><div class="line"><span class="keyword">import</span> com.google.android.things.pio.Gpio;</div><div class="line"><span class="keyword">import</span> com.google.android.things.pio.PeripheralManagerService;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Alpha.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * Example of using Button driver for toggling a LED.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * This activity initialize an InputDriver to emit key events when the button GPIO pin state change</div><div class="line"> * and flip the state of the LED GPIO pin.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * You need to connect an LED and a push button switch to pins specified in &#123;<span class="doctag">@link</span> BoardDefaults&#125;</div><div class="line"> * according to the schematic provided above.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Gpio mLedGpio;</div><div class="line">    <span class="keyword">private</span> ButtonInputDriver mButtonInputDriver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"Hello Android Things!"</span>);</div><div class="line">        Log.i(TAG, <span class="string">"Starting ButtonActivity"</span>);</div><div class="line"></div><div class="line">        PeripheralManagerService pioService = <span class="keyword">new</span> PeripheralManagerService();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Log.i(TAG, <span class="string">"Configuring GPIO pins"</span>);</div><div class="line">            mLedGpio = pioService.openGpio(BoardDefaults.getGPIOForLED());</div><div class="line">            mLedGpio.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);</div><div class="line"></div><div class="line">            Log.i(TAG, <span class="string">"Registering button driver"</span>);</div><div class="line">            <span class="comment">// Initialize and register the InputDriver that will emit SPACE key events</span></div><div class="line">            <span class="comment">// on GPIO state changes.</span></div><div class="line">            mButtonInputDriver = <span class="keyword">new</span> ButtonInputDriver(</div><div class="line">                    BoardDefaults.getGPIOForButton(),</div><div class="line">                    Button.LogicState.PRESSED_WHEN_LOW,</div><div class="line">                    KeyEvent.KEYCODE_SPACE);</div><div class="line">            mButtonInputDriver.register();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"Error configuring GPIO pins"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_SPACE) &#123;</div><div class="line">            <span class="comment">// Turn on the LED</span></div><div class="line">            setLedValue(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_SPACE) &#123;</div><div class="line">            <span class="comment">// Turn off the LED</span></div><div class="line">            setLedValue(<span class="keyword">false</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyUp(keyCode, event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Update the value of the LED output.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLedValue</span><span class="params">(<span class="keyword">boolean</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mLedGpio.setValue(value);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"Error updating GPIO value"</span>, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mButtonInputDriver != <span class="keyword">null</span>) &#123;</div><div class="line">            mButtonInputDriver.unregister();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mButtonInputDriver.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"Error closing Button driver"</span>, e);</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mButtonInputDriver = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mLedGpio != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                mLedGpio.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"Error closing LED GPIO"</span>, e);</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mLedGpio = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            mLedGpio = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加一个开发板的处理工具类BoardDefaults.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.geekdev.alpha.androidthings;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Build;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.android.things.pio.PeripheralManagerService;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Alpha.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardDefaults</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEVICE_EDISON_ARDUINO = <span class="string">"edison_arduino"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEVICE_EDISON = <span class="string">"edison"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEVICE_RPI3 = <span class="string">"rpi3"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEVICE_NXP = <span class="string">"imx6ul"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sBoardVariant = <span class="string">""</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return the GPIO pin that the LED is connected on.</div><div class="line">     * For example, on Intel Edison Arduino breakout, pin "IO13" is connected to an onboard LED</div><div class="line">     * that turns on when the GPIO pin is HIGH, and off when low.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getGPIOForLED</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (getBoardVariant()) &#123;</div><div class="line">            <span class="keyword">case</span> DEVICE_EDISON_ARDUINO:</div><div class="line">                <span class="keyword">return</span> <span class="string">"IO13"</span>;</div><div class="line">            <span class="keyword">case</span> DEVICE_EDISON:</div><div class="line">                <span class="keyword">return</span> <span class="string">"GP45"</span>;</div><div class="line">            <span class="keyword">case</span> DEVICE_RPI3:</div><div class="line">                <span class="keyword">return</span> <span class="string">"BCM6"</span>;</div><div class="line">            <span class="keyword">case</span> DEVICE_NXP:</div><div class="line">                <span class="keyword">return</span> <span class="string">"GPIO4_IO21"</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown Build.DEVICE "</span> + Build.DEVICE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Return the GPIO pin that the Button is connected on.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getGPIOForButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (getBoardVariant()) &#123;</div><div class="line">            <span class="keyword">case</span> DEVICE_EDISON_ARDUINO:</div><div class="line">                <span class="keyword">return</span> <span class="string">"IO12"</span>;</div><div class="line">            <span class="keyword">case</span> DEVICE_EDISON:</div><div class="line">                <span class="keyword">return</span> <span class="string">"GP44"</span>;</div><div class="line">            <span class="keyword">case</span> DEVICE_RPI3:</div><div class="line">                <span class="keyword">return</span> <span class="string">"BCM21"</span>;</div><div class="line">            <span class="keyword">case</span> DEVICE_NXP:</div><div class="line">                <span class="keyword">return</span> <span class="string">"GPIO4_IO20"</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unknown Build.DEVICE "</span> + Build.DEVICE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getBoardVariant</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!sBoardVariant.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> sBoardVariant;</div><div class="line">        &#125;</div><div class="line">        sBoardVariant = Build.DEVICE;</div><div class="line">        <span class="comment">// For the edison check the pin prefix</span></div><div class="line">        <span class="comment">// to always return Edison Breakout pin name when applicable.</span></div><div class="line">        <span class="keyword">if</span> (sBoardVariant.equals(DEVICE_EDISON)) &#123;</div><div class="line">            PeripheralManagerService pioService = <span class="keyword">new</span> PeripheralManagerService();</div><div class="line">            List&lt;String&gt; gpioList = pioService.getGpioList();</div><div class="line">            <span class="keyword">if</span> (gpioList.size() != <span class="number">0</span>) &#123;</div><div class="line">                String pin = gpioList.get(<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (pin.startsWith(<span class="string">"IO"</span>)) &#123;</div><div class="line">                    sBoardVariant = DEVICE_EDISON_ARDUINO;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sBoardVariant;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行到如下的Raspberry Pi 3中，使用按钮来控制LED灯。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14825504065215.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>所有示例项目代码可有<a href="https://github.com/alphayang/android-things-start" target="_blank" rel="external">Github</a>中找到.</p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>到这里，你已经了解Android Things的历史，特点和开发。更多关于Google技术的内容，欢迎加入G tech online meetup微信群进行交流。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-things/14827191554472.jpg" alt="" title="">
                </div>
                </figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Things正式接替Brillo亮相，名称的改变带来了什么新的内容，广大Android开发者如何进入这一新的领域，通过本文，你不仅会了解Android Things的来龙去脉，也会直接通过代码来体验开发带给你的魅力。&lt;/p&gt;
&lt;h1 id=&quot;Android-
    
    </summary>
    
    
      <category term="Android" scheme="https://yangbo.tech/tags/Android/"/>
    
      <category term="IOT" scheme="https://yangbo.tech/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>利器系列-Web网络模拟工具，测试应用在低速不稳定网络中的表现</title>
    <link href="https://yangbo.tech/2016/08/21/test-low-speed-load-for-web/"/>
    <id>https://yangbo.tech/2016/08/21/test-low-speed-load-for-web/</id>
    <published>2016-08-21T07:28:26.000Z</published>
    <updated>2016-08-21T08:54:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发环境中，由于开发者对设备和网络通常是最高标准的要求，用以提高自己的生产效率，会产生灯下黑的情况，开发出的产品在稳定的高速网络下表现优异，这很重要，但要进行换位思考，还需要更上一层楼，Web产品的使用者越来越多的是移动网络，而移动网络的特点就是不稳定以及龟速的GPRS还有很多人在用，为了在开发和测试环境中做到用户环境的网络模拟，我们需要使用一系列工具来帮助我们开发测试更好的Web。</p>
<h1 id="Chrome浏览器"><a href="#Chrome浏览器" class="headerlink" title="Chrome浏览器"></a>Chrome浏览器</h1><p>做为Web开发平台，Chrome提供了网络模拟，可以使用<a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/network-conditions?hl=en" target="_blank" rel="external">Chrome DevTools Network Panel</a>内置或自定义的网络条件。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717654037442.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>Android模拟器提供了网络设置<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717659599075.jpg" alt="" title="">
                </div>
                </figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717657537304.jpg" alt="" title="">
                </div>
                </figure>
<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>Network Link Conditioner，安装了<a href="https://developer.apple.com/downloads/?q=Hardware%20IO%20Tools" target="_blank" rel="external">Hardware IO Tools</a> for XCode后，System Preference中会添加这个工具。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717656363124.jpg" alt="" title="">
                </div>
                </figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717656027035.jpg" alt="" title="">
                </div>
                </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717656730855.jpg" alt="" title="">
                </div>
                </figure>
<h2 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h2><p><a href="http://www.telerik.com/fiddler" target="_blank" rel="external">Fiddler</a>可以提供网速模拟，还可以搭配[GeoEdge] (<a href="http://www.geoedge.com/faq" target="_blank" rel="external">http://www.geoedge.com/faq</a>) 模拟异地网络访问。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717694253486.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="Augmented-Traffic-Control"><a href="#Augmented-Traffic-Control" class="headerlink" title="Augmented Traffic Control"></a>Augmented Traffic Control</h2><p>使用Facebook的<a href="http://facebook.github.io/augmented-traffic-control/" target="_blank" rel="external">Augmented Traffic Control</a>，使用启用了ATC网络的用户，都可以轻松选择控制自己的上网速度设置。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717663810820.jpg" alt="" title="">
                </div>
                </figure><br>开发者只需要在浏览器页面上选择自己的网络配置，立即生效。<br>这个工具要赞一个FB，FB还设立了2G Tuesdays项目，在周二的时候就弹出使用2G网络的提示，让开发者切身感受用户的使用体验。</p>
<h2 id="自制ATC-enabled路由器"><a href="#自制ATC-enabled路由器" class="headerlink" title="自制ATC-enabled路由器"></a>自制ATC-enabled路由器</h2><p>设备：Netgear R7000，某东就有售<br>步骤：</p>
<h3 id="刷DD-WRT"><a href="#刷DD-WRT" class="headerlink" title="刷DD-WRT"></a>刷DD-WRT</h3><p>详细指南<a href="https://dd-wrt.com/wiki/index.php/DD-WRT_on_R7000" target="_blank" rel="external">DD-WRT on R7000</a>，下载<a href="http://www.desipro.de/ddwrt-ren/K3-AC-Arm/Initial/" target="_blank" rel="external">刷机文件</a>，使用Netgear Web Tool的Update Tool上传文件。<br>使用路由器Web管理界面的用户名和密码SSH到路由器。<br>刷机命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ddup --flash-latest</div></pre></td></tr></table></figure></p>
<h3 id="配置ATC存储"><a href="#配置ATC存储" class="headerlink" title="配置ATC存储"></a>配置ATC存储</h3><p>开启USB存储<br>把U盘格式化为ext3，此处先让U盘自动加载，不要填UUID到/opt，刷新页面后会出现UUID，填到/opt并保存。重新拔插U盘后刷新页面。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717670501540.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="安装opkg包管理器"><a href="#安装opkg包管理器" class="headerlink" title="安装opkg包管理器"></a>安装opkg包管理器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /tmp </div><div class="line">wget http://qnapware.zyxmon.org/binaries-armv7/installer/entware_install_arm.sh chmod +x entware_install_arm.sh </div><div class="line">./entware_install_arm.sh</div></pre></td></tr></table></figure>
<p>验证安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opkg update</div></pre></td></tr></table></figure></p>
<p>opkg安装成本，继续安装其它依赖。</p>
<h2 id="安装其它依赖"><a href="#安装其它依赖" class="headerlink" title="安装其它依赖"></a>安装其它依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opkg install ca-certificates python-base python-crypto python-logging nano</div></pre></td></tr></table></figure>
<p>easy_setup<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl https://bootstrap.pypa.io/ez_setup.py -k &gt; ez_setup.py</div><div class="line">python ez_setup.py</div></pre></td></tr></table></figure></p>
<p>pip<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl https://bootstrap.pypa.io/get-pip.py -k &gt; get-pip.py </div><div class="line">python get-pip.py</div></pre></td></tr></table></figure></p>
<h2 id="安装ATC依赖"><a href="#安装ATC依赖" class="headerlink" title="安装ATC依赖"></a>安装ATC依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install atc_thrift atcd django-atc-api django-atc-demo-ui django-atc-profile-storage</div></pre></td></tr></table></figure>
<h2 id="创建一个Django项目"><a href="#创建一个Django项目" class="headerlink" title="创建一个Django项目"></a>创建一个Django项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir /opt/var/django </div><div class="line"><span class="built_in">cd</span> /opt/var/django </div><div class="line">django-admin startproject atcui </div><div class="line"><span class="built_in">cd</span> atcui</div></pre></td></tr></table></figure>
<h2 id="配置ACT"><a href="#配置ACT" class="headerlink" title="配置ACT"></a>配置ACT</h2><p>编辑atcui/settings.py添加ATC到INSTALLED_APPS<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = (</div><div class="line">    ...</div><div class="line">    <span class="comment"># Django ATC API</span></div><div class="line">    <span class="string">'rest_framework'</span>,</div><div class="line">    <span class="string">'atc_api'</span>,</div><div class="line">    <span class="comment"># Django ATC Demo UI</span></div><div class="line">    <span class="string">'bootstrap_themes'</span>,</div><div class="line">    <span class="string">'django_static_jquery'</span>,</div><div class="line">    <span class="string">'atc_demo_ui'</span>,</div><div class="line">    <span class="comment"># Django ATC Profile Storage</span></div><div class="line">    <span class="string">'atc_profile_storage'</span>,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>编辑atcui/urls.py将ACT路由添加以urlpatterns<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> RedirectView </div><div class="line">urlpatterns = patterns(<span class="string">''</span>,     </div><div class="line"><span class="meta">... </span>    </div><div class="line"><span class="comment"># Django ATC API     url(r'^api/v1/', include('atc_api.urls')),     </span></div><div class="line"><span class="comment"># Django ATC Demo UI     url(r'^atc_demo_ui/', include('atc_demo_ui.urls')),     </span></div><div class="line"><span class="comment"># Django ATC profile storage     </span></div><div class="line">url(<span class="string">r'^api/v1/profiles/'</span>, include(<span class="string">'atc_profile_storage.urls'</span>)),     </div><div class="line">url(<span class="string">r'^$'</span>, RedirectView.as_view(url=<span class="string">'/atc_demo_ui/'</span>, permanent=<span class="keyword">False</span>)), )</div></pre></td></tr></table></figure></p>
<p>django-bootstrap-themes patch:详见<a href="https://github.com/facebook/augmented-traffic-control/issues/216" target="_blank" rel="external">issue</a><br>编辑/opt/lib/python2.7/site-packages/atc_demo_ui/templates/atc_demo_ui</p>
<p>更新Django DB<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py migrate</div></pre></td></tr></table></figure></p>
<h2 id="启动ACT"><a href="#启动ACT" class="headerlink" title="启动ACT"></a>启动ACT</h2><p>启动守护进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo atcd</div></pre></td></tr></table></figure></p>
<p>启动UI<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver 0.0.0.0:8000</div></pre></td></tr></table></figure></p>
<p>测试<a href="http://192.168.18.1:8000,当然要换成你的路由器地址。" target="_blank" rel="external">http://192.168.18.1:8000,当然要换成你的路由器地址。</a></p>
<h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h2><p>###全员参与<br>设置一个nocatsplash到act的web ui,<a href="http://192.168.1.1:8000/atc_demo_ui/，用网的时候自动跳转的ACT配置界面。" target="_blank" rel="external">http://192.168.1.1:8000/atc_demo_ui/，用网的时候自动跳转的ACT配置界面。</a></p>
<p>###ACTD开机自启<br>在/opt/start下加一个startup.sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh </div><div class="line">atcd --atcd-wan vlan2 --atcd-lan br0 --atcd-mode unsecure --atcd-iptables /usr/sbin/iptables --daemon </div><div class="line">nohup python /opt/var/django/atcui/manage.py runserver 0.0.0.0:8000 &amp;</div></pre></td></tr></table></figure></p>
<p>然后在DD-WRT的Web管理界面设置为startup script.</p>
<h1 id="SAAS"><a href="#SAAS" class="headerlink" title="SAAS"></a>SAAS</h1><p><a href="https://webpagetest.org/" target="_blank" rel="external">WebPageTest</a>是一个在线服务，可以指定不同的浏览器版本和所在地，进行测试并提供详细的加载时间报表，用来优化页面访问。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/test-low-speed-load-for-web/14717689392914.jpg" alt="" title="">
                </div>
                </figure></p>
<p>WebPageTest还提供OpenAPI访问，用以把异地网络加载测试集成到整个构建测试流程中。</p>
<p>#小结<br>现实世界遵循二八原理，为20%的用户开发的同时，也不要忘了还有更大的80%的用户君体，让你的Web产品提供最好的用户体验给最多的人，可以让这些工具来帮助我们。欲善其事，先利其器！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发环境中，由于开发者对设备和网络通常是最高标准的要求，用以提高自己的生产效率，会产生灯下黑的情况，开发出的产品在稳定的高速网络下表现优异，这很重要，但要进行换位思考，还需要更上一层楼，Web产品的使用者越来越多的是移动网络，而移动网络的特点就是不稳定以及龟速的GPRS还
    
    </summary>
    
    
      <category term="Dev" scheme="https://yangbo.tech/tags/Dev/"/>
    
      <category term="Web" scheme="https://yangbo.tech/tags/Web/"/>
    
      <category term="Test" scheme="https://yangbo.tech/tags/Test/"/>
    
      <category term="Tool" scheme="https://yangbo.tech/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>1分钟搭建自定义域名的本地HTTPS开发服务器</title>
    <link href="https://yangbo.tech/2016/08/19/local-https-server-with-custom-domain-in-1-minute/"/>
    <id>https://yangbo.tech/2016/08/19/local-https-server-with-custom-domain-in-1-minute/</id>
    <published>2016-08-19T09:32:30.000Z</published>
    <updated>2016-08-19T10:19:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>越来越多的Web API调用依赖HTTPS环境，比如Web Bluetooth API，Web Geo API,Web Notificaiton API等等，以下步骤快速搭建一个HTTPS开发服务器。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>OS X 10.11.6（El Capitan)<br>Python 2.7.10 (OS自带)<br>OpenSSL 1.0.2h  3 May 2016(brew install openssl)<br>Google Chrome Version 52.0.2743.116 (64-bit)</p>
<h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -new -x509 -keyout server.pem -out server.pem -days 365 -nodes</div></pre></td></tr></table></figure>
<p>证书信息都可以留空，只有Common Name填写自定义域名，此处使用通二级域名<br>Common Name (e.g. server FQDN or YOUR name) []:*.alpha.me<br>会在当前目录下生成server.pem证书。</p>
<h1 id="使用证书"><a href="#使用证书" class="headerlink" title="使用证书"></a>使用证书</h1><p>vi https-server.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> BaseHTTPServer, SimpleHTTPServer</div><div class="line"></div><div class="line"><span class="keyword">import</span> ssl</div><div class="line"></div><div class="line">httpd = BaseHTTPServer.HTTPServer((<span class="string">'localhost'</span>, <span class="number">4443</span>), SimpleHTTPServer.SimpleHTTPRequestHandler)</div><div class="line"></div><div class="line">httpd.socket = ssl.wrap_socket (httpd.socket, certfile=<span class="string">'./server.pem'</span>, server_side=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">httpd.serve_forever()</div></pre></td></tr></table></figure></p>
<h1 id="启动https服务器"><a href="#启动https服务器" class="headerlink" title="启动https服务器"></a>启动https服务器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python simple-https-server.py</div></pre></td></tr></table></figure>
<h1 id="Chrome访问"><a href="#Chrome访问" class="headerlink" title="Chrome访问"></a>Chrome访问</h1><p><a href="https://localhost:4443" target="_blank" rel="external">https://localhost:4443</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715989422211.jpg" alt="" title="">
                </div>
                </figure><br>不受信的证书提醒</p>
<h1 id="添加证书到可性"><a href="#添加证书到可性" class="headerlink" title="添加证书到可性"></a>添加证书到可性</h1><p>查看证书信息<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715990422592.jpg" alt="" title="">
                </div>
                </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715990770634.jpg" alt="" title="">
                </div>
                </figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715992254930.jpg" alt="" title="">
                </div>
                </figure>
<p>将证书样的图片拖到桌面，在桌面生成一个*.alpha.me.cer的文件，双击直接导入到Keychain Access</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715993769062.jpg" alt="" title="">
                </div>
                </figure>
<p>双击打开新添加的证书<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715994111087.jpg" alt="" title="">
                </div>
                </figure><br>设置为总是信任<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715995068978.jpg" alt="" title="">
                </div>
                </figure><br>关闭证书信息，需要输入用户密码<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715995938717.jpg" alt="" title="">
                </div>
                </figure><br>图标变成蓝十字，说明更改成功<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715996351079.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="添加域名到-etc-hosts"><a href="#添加域名到-etc-hosts" class="headerlink" title="添加域名到/etc/hosts"></a>添加域名到/etc/hosts</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/hosts</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715997272632.jpg" alt="" title="">
                </div>
                </figure>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>重启Chrome，浏览器<a href="https://1.alpha.me:4443" target="_blank" rel="external">https://1.alpha.me:4443</a></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/https-server-in-minute/14715997977182.jpg" alt="" title="">
                </div>
                </figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越来越多的Web API调用依赖HTTPS环境，比如Web Bluetooth API，Web Geo API,Web Notificaiton API等等，以下步骤快速搭建一个HTTPS开发服务器。&lt;/p&gt;
&lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; cl
    
    </summary>
    
    
      <category term="Dev" scheme="https://yangbo.tech/tags/Dev/"/>
    
      <category term="OS X" scheme="https://yangbo.tech/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>禁止Android File Transfer自动启动</title>
    <link href="https://yangbo.tech/2016/08/16/disable-android-file-transfer-auto-start/"/>
    <id>https://yangbo.tech/2016/08/16/disable-android-file-transfer-auto-start/</id>
    <published>2016-08-16T11:18:08.000Z</published>
    <updated>2016-08-16T11:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-File-Transfer"><a href="#Android-File-Transfer" class="headerlink" title="Android File Transfer"></a>Android File Transfer</h2><p><a href="https://www.android.com/filetransfer" target="_blank" rel="external">Android File Transfer</a>是Google官方提供的Android设备与Mac之间传统文件工具，默认情况下Android设备连接后就自动启动Android File Transfer，对于普通用户来讲，这是个方便之举，连接就是为了传文件，但开发者很多是为了调试应用，默认打开就成了画蛇添足。</p>
<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment:"></a>Environment:</h2><p>Android File Transfer:1.0.0<br>OS X EI Capitan</p>
<h2 id="禁止步骤"><a href="#禁止步骤" class="headerlink" title="禁止步骤:"></a>禁止步骤:</h2><h3 id="Close-Android-File-Transfer"><a href="#Close-Android-File-Transfer" class="headerlink" title="Close Android File Transfer"></a>Close Android File Transfer</h3><h3 id="Open-Activity-Monitor-and-kill-“Android-File-Transfer-Agent”"><a href="#Open-Activity-Monitor-and-kill-“Android-File-Transfer-Agent”" class="headerlink" title="Open Activity Monitor and kill “Android File Transfer Agent”"></a>Open Activity Monitor and kill “Android File Transfer Agent”</h3><h3 id="Go-to-where-you-installed-“Android-File-Transfer-app”-I-have-it-under-Applications"><a href="#Go-to-where-you-installed-“Android-File-Transfer-app”-I-have-it-under-Applications" class="headerlink" title="Go to where you installed “Android File Transfer.app” (I have it under /Applications)"></a>Go to where you installed “Android File Transfer.app” (I have it under /Applications)</h3><h3 id="Ctrl-click-–-gt-“Show-package-contents”"><a href="#Ctrl-click-–-gt-“Show-package-contents”" class="headerlink" title="Ctrl+click –&gt; “Show package contents”"></a>Ctrl+click –&gt; “Show package contents”</h3><h3 id="Go-to-Contents-Resources"><a href="#Go-to-Contents-Resources" class="headerlink" title="Go to Contents/Resources"></a>Go to Contents/Resources</h3><h3 id="Rename-“Android-File-Transfer-Agent”-to-e-g-“Android-File-Transfer-Agent-DISABLED”"><a href="#Rename-“Android-File-Transfer-Agent”-to-e-g-“Android-File-Transfer-Agent-DISABLED”" class="headerlink" title="Rename “Android File Transfer Agent” to e.g. “Android File Transfer Agent_DISABLED”"></a>Rename “Android File Transfer Agent” to e.g. “Android File Transfer Agent_DISABLED”</h3><h3 id="Then-go-to-“-Users-username-Library-Application-Support-Google-Android-File-Transfer”-and-again-rename-the-Agent-app"><a href="#Then-go-to-“-Users-username-Library-Application-Support-Google-Android-File-Transfer”-and-again-rename-the-Agent-app" class="headerlink" title="Then go to “/Users/username/Library/Application Support/Google/Android File Transfer” and again rename the Agent app."></a>Then go to “/Users/username/Library/Application Support/Google/Android File Transfer” and again rename the Agent app.</h3><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>不会自动启动了，需要时直接Alfred</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Android-File-Transfer&quot;&gt;&lt;a href=&quot;#Android-File-Transfer&quot; class=&quot;headerlink&quot; title=&quot;Android File Transfer&quot;&gt;&lt;/a&gt;Android File Transfer&lt;/
    
    </summary>
    
      <category term="develop" scheme="https://yangbo.tech/categories/develop/"/>
    
    
      <category term="Android" scheme="https://yangbo.tech/tags/Android/"/>
    
      <category term="OSX" scheme="https://yangbo.tech/tags/OSX/"/>
    
  </entry>
  
  <entry>
    <title>Google IO 2016 地图开发技术回顾 - 一场地理数据开发创新博览会</title>
    <link href="https://yangbo.tech/2016/05/31/io-16-geo-redux/"/>
    <id>https://yangbo.tech/2016/05/31/io-16-geo-redux/</id>
    <published>2016-05-31T11:30:35.000Z</published>
    <updated>2016-06-02T06:04:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="会场"><a href="#会场" class="headerlink" title="会场"></a>会场</h1><h2 id="Shoreline-Amphitheater"><a href="#Shoreline-Amphitheater" class="headerlink" title="Shoreline Amphitheater"></a>Shoreline Amphitheater</h2><p>Google IO 2016首次将会场从位于旧金山市区的Moscone Center West移师到了Google Campus一路之隔的露天大剧场，有了更大的会场，将以往2天的会期延长到了3天，都是满满的干货，技术控表示太开心了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648384214170.jpg" alt="Shoreline" title="">
                </div>
                </figure></p>
<h2 id="IO大巴实时地图"><a href="#IO大巴实时地图" class="headerlink" title="IO大巴实时地图"></a>IO大巴实时地图</h2><p>如何从酒店到会场，Maps来帮你了解摆渡车安排<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648389440652.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="CODE-THE-ROAD"><a href="#CODE-THE-ROAD" class="headerlink" title="CODE THE ROAD"></a>CODE THE ROAD</h2><p>到了地图博览会的核心地带，CODE THE ROAD大巴，从去年IO开始出发，足迹已经遍布了整个美国，今年再次从起点出发。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648383619058.jpg" alt="大巴全景" title="">
                </div>
                </figure></p>
<h2 id="360度全景展示大巴内景"><a href="#360度全景展示大巴内景" class="headerlink" title="360度全景展示大巴内景"></a>360度全景展示大巴内景</h2><p>原片地址(需梯子），使用鼠标或键盘控制全景方位<br><a href="https://www.youtube.com/watch?v=z8RR0BMYLco&amp;feature=youtu.be?utm_source=twitter&amp;utm_medium=social&amp;utm_campaign=2016-geo-na-other-orgsocial-twitter-us-GoogleIO&amp;utm_content=BusTour" target="_blank" rel="external">https://www.youtube.com/watch?v=z8RR0BMYLco</a></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648400239942.jpg" alt="" title="">
                </div>
                </figure>
<p>技术控说：在Chrome中查看视频，是标准的HTML5 Video标签，使用全影录像设备生成的内容，都可以使用标准的Web技术来提供访问。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648405615630.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="大巴外景全景图"><a href="#大巴外景全景图" class="headerlink" title="大巴外景全景图"></a>大巴外景全景图</h2><p><a href="https://www.google.com/maps/place/Shoreline+Amphitheatre/@37.4243714,-122.0792483,3a,75y,259.73h,73.31t/data=!3m8!1e1!3m6!1s-IjD1C01azV4%2FVzy-b7YPWHI%2FAAAAAAAAAA8%2FGz-4TU2b8ysP8a2F7VA8eEgUvzR42NGQQCLIB!2e4!3e11!6s%2F%2Flh6.googleusercontent.com%2F-IjD1C01azV4%2FVzy-b7YPWHI%2FAAAAAAAAAA8%2FGz-4TU2b8ysP8a2F7VA8eEgUvzR42NGQQCLIB%2Fw203-h101-n-k-no%2F!7i5376!8i2688!4m5!3m4!1s0x808fb9f776f5e165:0x1ddf014a1b553f3d!8m2!3d37.4267739!4d-122.0807037!6m1!1e1" target="_blank" rel="external">猛击访问</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648411191734.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="大巴车顶全景图"><a href="#大巴车顶全景图" class="headerlink" title="大巴车顶全景图"></a>大巴车顶全景图</h2><p><a href="https://www.google.com/maps/place/Shoreline+Amphitheatre/@37.4243011,-122.0791626,3a,75y,216.15h,87.26t/data=!3m8!1e1!3m6!1s-_hKHc9UPuDE%2FVz3vrshT44I%2FAAAAAAAAABM%2F8q5Ayh7HSCIagUk2c0YJo5svCqwr_T2wQCLIB!2e4!3e11!6s%2F%2Flh6.googleusercontent.com%2F-_hKHc9UPuDE%2FVz3vrshT44I%2FAAAAAAAAABM%2F8q5Ayh7HSCIagUk2c0YJo5svCqwr_T2wQCLIB%2Fw203-h101-n-k-no%2F!7i5376!8i2688!4m5!3m4!1s0x808fb9f776f5e165:0x1ddf014a1b553f3d!8m2!3d37.4267739!4d-122.0807037!6m1!1e1" target="_blank" rel="external">猛击访问</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648412803522.jpg" alt="" title="">
                </div>
                </figure><br><strong><em>制作全景图可以使用<a href="https://www.google.com/maps/streetview/publish/" target="_blank" rel="external">https://www.google.com/maps/streetview/publish/</a></em></strong></p>
<h2 id="虚拟赛道"><a href="#虚拟赛道" class="headerlink" title="虚拟赛道"></a>虚拟赛道</h2><p>After Hour的自行车比赛。可以选用Google街景的任意路线做为赛道，沉浸式的骑行体验，让健身乐趣无穷。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648408759523.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="Terra-Bella-satellite-imagery"><a href="#Terra-Bella-satellite-imagery" class="headerlink" title="Terra Bella satellite imagery"></a>Terra Bella satellite imagery</h2><p><a href="https://terrabella.google.com" target="_blank" rel="external">https://terrabella.google.com</a><br>收购的Skymap，改名为Terra Bella，使得大众化的卫星实时数据查看和开发在不久的将来得以实现。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648457273867.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="Google-Maps-API-beta-program"><a href="#Google-Maps-API-beta-program" class="headerlink" title="Google Maps API beta program"></a>Google Maps API beta program</h1><p>地图开发者参加Beta计划，得到最优先使用前沿开发资料。<br><a href="https://developers.google.com/maps/beta/" target="_blank" rel="external">点击加入Beta Program</a></p>
<h1 id="地图开发演讲"><a href="#地图开发演讲" class="headerlink" title="地图开发演讲"></a>地图开发演讲</h1><h2 id="Streamlining-developer-experiences-with-the-Google-Maps-APIs"><a href="#Streamlining-developer-experiences-with-the-Google-Maps-APIs" class="headerlink" title="Streamlining developer experiences with the Google Maps APIs"></a>Streamlining developer experiences with the Google Maps APIs</h2><p>最新的Google地图开发汇总<br><a href="https://www.youtube.com/watch?v=WJY2tGVQDGQ" target="_blank" rel="external">Youtube Video</a></p>
<h2 id="Understand-your-Place-in-this-world"><a href="#Understand-your-Place-in-this-world" class="headerlink" title="Understand your Place in this world"></a>Understand your Place in this world</h2><p>如何使用全球最全的的POI数据来开发你的超酷应用<br><a href="https://www.youtube.com/watch?v=QR3PIg0RDnk" target="_blank" rel="external">Youtube Video</a><br><a href="https://code-labs.cn/io2016?cat=Geo" target="_blank" rel="external">Code Lab</a></p>
<h2 id="Location-and-Proximity-Superpowers-Eddystone-Google-Beacon-Platform"><a href="#Location-and-Proximity-Superpowers-Eddystone-Google-Beacon-Platform" class="headerlink" title="Location and Proximity Superpowers: Eddystone + Google Beacon Platform"></a>Location and Proximity Superpowers: Eddystone + Google Beacon Platform</h2><p>使用Eddystone和Google Beacon Platform开发基于位置和周边的服务<br><a href="https://www.youtube.com/watch?v=3nYyApSiSLQ" target="_blank" rel="external">Youtube Video</a></p>
<h2 id="Building-Geo-services-that-scale"><a href="#Building-Geo-services-that-scale" class="headerlink" title="Building Geo services that scale"></a>Building Geo services that scale</h2><p>搭配Google Cloud Platform和Google Maps API开发安全和可扩展的位置服务<br><a href="https://events.google.com/io2016/schedule?filters=Location%20%26%20Maps&amp;sid=8e621cfd-0bef-e511-a517-00155d5066d7#day2/8e621cfd-0bef-e511-a517-00155d5066d7" target="_blank" rel="external">Session</a></p>
<h2 id="reCAPTCHA-Tough-on-Bots-Easy-on-Humans-Great-on-Mobile"><a href="#reCAPTCHA-Tough-on-Bots-Easy-on-Humans-Great-on-Mobile" class="headerlink" title="reCAPTCHA: Tough on Bots, Easy on Humans, Great on Mobile"></a>reCAPTCHA: Tough on Bots, Easy on Humans, Great on Mobile</h2><p>利用位置信息提高验证系统的用户体验<br><a href="https://www.youtube.com/watch?v=r-HlJyNWfoY" target="_blank" rel="external">Youtube Video</a></p>
<h1 id="无人驾驶汽车"><a href="#无人驾驶汽车" class="headerlink" title="无人驾驶汽车"></a>无人驾驶汽车</h1><p>地图，导航，大数据，云计算，人工智能……，一辆无人驾驶汽车，就是将位置数据开发利用的集大成者，让多少人魂牵梦萦，利用这次大场地的活动，Google将自家的原型车搬到了会场，让与会开发者一饱眼福。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648459280956.jpg" alt="" title="">
                </div>
                </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648459365750.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="气球计划"><a href="#气球计划" class="headerlink" title="气球计划"></a>气球计划</h1><p>气球互联网计划也是首次在IO大会上露出真容，希望这种普惠式的网络访问方式能够早一天在地球实现！<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/io-16-geo-redux/14648461112856.jpg" alt="" title="">
                </div>
                </figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;会场&quot;&gt;&lt;a href=&quot;#会场&quot; class=&quot;headerlink&quot; title=&quot;会场&quot;&gt;&lt;/a&gt;会场&lt;/h1&gt;&lt;h2 id=&quot;Shoreline-Amphitheater&quot;&gt;&lt;a href=&quot;#Shoreline-Amphitheater&quot; class=&quot;
    
    </summary>
    
      <category term="develop" scheme="https://yangbo.tech/categories/develop/"/>
    
    
      <category term="Maps API" scheme="https://yangbo.tech/tags/Maps-API/"/>
    
      <category term="Cloud" scheme="https://yangbo.tech/tags/Cloud/"/>
    
      <category term="Big Data" scheme="https://yangbo.tech/tags/Big-Data/"/>
    
      <category term="AI" scheme="https://yangbo.tech/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>client-security-from-google</title>
    <link href="https://yangbo.tech/2016/05/29/client-security-from-google/"/>
    <id>https://yangbo.tech/2016/05/29/client-security-from-google/</id>
    <published>2016-05-29T09:32:30.000Z</published>
    <updated>2016-05-29T09:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><h2 id="XcodeGhost"><a href="#XcodeGhost" class="headerlink" title="XcodeGhost"></a>XcodeGhost</h2><h2 id="Stagefright"><a href="#Stagefright" class="headerlink" title="Stagefright"></a>Stagefright</h2><p><a href="http://www.theguardian.com/technology/2015/jul/28/stagefright-android-vulnerability-heartbleed-mobile" target="_blank" rel="external">http://www.theguardian.com/technology/2015/jul/28/stagefright-android-vulnerability-heartbleed-mobile</a><br><a href="http://www.androidcentral.com/stagefright" target="_blank" rel="external">http://www.androidcentral.com/stagefright</a><br><a href="http://www.digitaltrends.com/mobile/android-stagefright-mms-hack-news/" target="_blank" rel="external">http://www.digitaltrends.com/mobile/android-stagefright-mms-hack-news/</a><br>在彩信中插入恶意小视频，系统会自动在用户看到前触发Stagefright，中招。<br>利用Android 5.1.1, build LMY48I系统更新。</p>
<h1 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h1><h2 id="开发人员坚持从官方更新开发工具，-保持干净的系统，安全意识很重要"><a href="#开发人员坚持从官方更新开发工具，-保持干净的系统，安全意识很重要" class="headerlink" title="开发人员坚持从官方更新开发工具， 保持干净的系统，安全意识很重要"></a>开发人员坚持从官方更新开发工具， 保持干净的系统，安全意识很重要</h2><p>团队提供稳定的网络环境，不只有利于团队人员的技术成长，更是打造竞争力产品的需要。<br><strong>老话：安全，至关重要。</strong></p>
<h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><h2 id="设备购买"><a href="#设备购买" class="headerlink" title="设备购买"></a>设备购买</h2><p>购买设备时，不只比拼硬件的参数，系统的持续更新能力不止体现在更多的功能，也表示更好的系统安全保证。</p>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>系统更新是包含在购买价格中的，全球所有用户都可以处于同一安全水平。</p>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>选购Android比较复杂：</p>
<ul>
<li>Google的Nexus首选，纯净系统与最新最快的系统更新，不只需要硬件海淘，还要有稳定的科学上网能力；</li>
<li>次选MIUI，拥有系统的持续更新能力；</li>
<li>只使用Google Play市场，Google最有动力也最有实力保证市场中应用的安全性；</li>
<li>不Root，即使刷机后要把BootLoader重新锁上；<h3 id="远程锁定和数据抹除"><a href="#远程锁定和数据抹除" class="headerlink" title="远程锁定和数据抹除"></a>远程锁定和数据抹除</h3>Android和iOS都支持找回手机功能，利用原理一样，设备检测到网络即报告自己的位置信息，已经有不少新闻报道提到通过这种方式找回了丢失的手机。同样的原理，移动设备在丢失后可以远程抹除数据</li>
</ul>
<h2 id="密码策略"><a href="#密码策略" class="headerlink" title="密码策略"></a>密码策略</h2><h3 id="开启2步验证"><a href="#开启2步验证" class="headerlink" title="开启2步验证"></a>开启2步验证</h3><p>主力帐户，如 Google Account, Apple ID，支付宝，微信，LastPass等开启两步验证。即使密码泄漏，还需要手机验证码才能访问帐户。</p>
<p>2 step verification<br>apple id的保护：apple id, recovery key， password有两项才可解锁帐户，使用密码登陆时使用绑定手机或设备接收4位验证码。</p>
<h3 id="密码管理软件"><a href="#密码管理软件" class="headerlink" title="密码管理软件"></a>密码管理软件</h3><p>推荐 LastPass，推荐链接<br>类似于自家保险柜和银行保险柜的差别，不只是只记一个密码了，密码信息保护能力有了质的提升。</p>
<h3 id="一个服务一个密码"><a href="#一个服务一个密码" class="headerlink" title="一个服务一个密码"></a>一个服务一个密码</h3><p>登陆帐户无所不在，配合 LastPass 实施一个帐户一个密码，也不排队有异常能力的人可以通过一定的规则来人工实现这一增强机制。</p>
<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>简单就是最好，使用Google Chrome帐户同步，基于 Chrome 的安全快速特性，不只保持浏览器网页时的安全，也将浏览数据保护起来，如果设备丢失，<br>检测是否能远程删除同步数据</p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><h2 id="恶意网页检测API"><a href="#恶意网页检测API" class="headerlink" title="恶意网页检测API"></a>恶意网页检测API</h2><p>浏览器开发者可以利用 Google 的恶意网页检测API来增强用户浏览的安全性，让你的浏览器可以拥有和 Chrome 一样的安全网页检测功能。</p>
<h2 id="Andorid-和-Chrome-的漏洞报告奖励"><a href="#Andorid-和-Chrome-的漏洞报告奖励" class="headerlink" title="Andorid 和 Chrome 的漏洞报告奖励"></a>Andorid 和 Chrome 的漏洞报告奖励</h2><h3 id="Android-Rewards"><a href="#Android-Rewards" class="headerlink" title="Android Rewards"></a>Android Rewards</h3><p><a href="https://www.google.com.sg/about/appsecurity/android-rewards/" target="_blank" rel="external">https://www.google.com.sg/about/appsecurity/android-rewards/</a></p>
<h3 id="Chrome-Rewards"><a href="#Chrome-Rewards" class="headerlink" title="Chrome Rewards"></a>Chrome Rewards</h3><p><a href="https://www.google.com.sg/about/appsecurity/chrome-rewards/" target="_blank" rel="external">https://www.google.com.sg/about/appsecurity/chrome-rewards/</a></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>应用泄露用户信息，因为应用加密做的很差，公开后才引起重视<br><a href="https://www.larrysalibra.com/how-chinese-tinder-clone-screws-you/" target="_blank" rel="external">https://www.larrysalibra.com/how-chinese-tinder-clone-screws-you/</a><br><a href="https://www.larrysalibra.com/tantan-responds-promises-encryption/" target="_blank" rel="external">https://www.larrysalibra.com/tantan-responds-promises-encryption/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;h2 id=&quot;XcodeGhost&quot;&gt;&lt;a href=&quot;#XcodeGhost&quot; class=&quot;headerlink&quot; title=&quot;Xcode
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Studio 2.0</title>
    <link href="https://yangbo.tech/2015/11/28/android-studio-20/"/>
    <id>https://yangbo.tech/2015/11/28/android-studio-20/</id>
    <published>2015-11-28T11:45:34.000Z</published>
    <updated>2015-11-29T07:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio 1.5刚推出几天，2.0就正式在 Canary 通道中放了出来，从1到2是一个大的版本升级，最主要就是体现在“快”这一个字上，也就是提速 app 的 build 和 deployment。</p>
<h2 id="获取2-0"><a href="#获取2-0" class="headerlink" title="获取2.0"></a>获取2.0</h2><h3 id="全新安装"><a href="#全新安装" class="headerlink" title="全新安装"></a>全新安装</h3><p><a href="http://tools.android.com/download/studio/canary" target="_blank" rel="external">下载</a></p>
<h3 id="修改-update-channel"><a href="#修改-update-channel" class="headerlink" title="修改 update channel"></a>修改 update channel</h3><p>‘Command+,’<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-studio-20/14487648883118.jpg" alt="" title="">
                </div>
                </figure></p>
<p>Tips：Canary，Dev，Beta，Stable 四个 Channel 从 Chrome 项目中借鉴过来，也几乎变成了 Google 发布客户端更新的官方范式</p>
<ul>
<li>Canary：weekly build(chrome 中 Canary 为 daily build)</li>
<li>发布依次由 Canary-&gt; Dev-&gt; Beta-&gt; Stable 不断推进，让 Bug 尽早发现并修复</li>
</ul>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><h3 id="dx"><a href="#dx" class="headerlink" title="dx"></a>dx</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-studio-20/14487675338632.jpg" alt="" title="">
                </div>
                </figure>
<p>dx工具负责将所有经过 javac编译生成的.class文件转换并合并成一个.dex（dalivk executable）文件</p>
<ul>
<li>优化的 dx merger<ul>
<li>Build Tools 23.0.2+.</li>
</ul>
</li>
<li><p>后台运行 dx(Run dx in process)，把 dx 工作分散到平时默默进行，不用挤到 build 时，降低 build 时间峰值</p>
<ul>
<li>Gradle 2.4+</li>
<li>Plugin 2.0.0+</li>
<li>Build Tools 23.0.2+</li>
<li>在 build.gradle 中启用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    dexOptions &#123;</div><div class="line">        dexInProcess = true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>配置 gradle 最大 jvm 内存使用,dex.jar 运行在 gradle 内存空间中，gradle以 daemon 进程一直存活代替之前的按需启动的短生命周期实例。在 project 下的 gradle.properties 中设置</p>
<ul>
<li><code>org.gradle.jvmargs=-Xmx4096m</code>，</li>
</ul>
</li>
<li>并行 dexer<ul>
<li>最多可并行4个 dexer 任务</li>
<li>在 project 下的 gradle.properties 中使用android.dexerPoolSize环境变量来指定并行数量</li>
</ul>
</li>
</ul>
<h3 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a>ProGuard</h3><ul>
<li>不足：<ul>
<li>不支持增量模式，每次都是全部处理一遍</li>
<li>阻止 pre-dexing，只支持单个 dex 输出且每次执行都是全部 re-dexing</li>
</ul>
</li>
<li>改进：<ul>
<li>部分增量模式支持</li>
<li>可以 pre-dexing</li>
</ul>
</li>
<li>使用，不需额外配置，得到的好处就是快了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            minifyEnabled true</div><div class="line">            useProguard false</div><div class="line">        &#125;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled true</div><div class="line">            useProguard true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="multi-dex"><a href="#multi-dex" class="headerlink" title="multi-dex"></a>multi-dex</h3><p>根据 connected Device API level:</p>
<ul>
<li><blockquote>
<p>=21，即 art 上，运行时原生支持加载多个 dex 文件，在安装编译时将多个 dex 编译合在一起，</p>
</blockquote>
</li>
<li><21，即 dalivk="" 上，打包时使用="" legacy="" multi-dex="" 模式，="" <figure="" class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:multidex:1.0.0&apos;</div></pre></td></tr></table>

</21，即></li>
</ul>
<p>这个选择是Android Studio 自动的，配置好后，不需要手动干预。</p>
<h3 id="更快速的发布"><a href="#更快速的发布" class="headerlink" title="更快速的发布"></a>更快速的发布</h3><h4 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h4><p>新的 adb，提供更稳定高速的连接通路</p>
<h4 id="针对所连接设备进行-debug-构建，只在-Android-Studio-中才有特性"><a href="#针对所连接设备进行-debug-构建，只在-Android-Studio-中才有特性" class="headerlink" title="针对所连接设备进行 debug 构建，只在 Android Studio 中才有特性"></a>针对所连接设备进行 debug 构建，只在 Android Studio 中才有特性</h4><p>通常情况下APK 包含了多 dpi 支持，但开发设备上的 dpi 是已知的（如 mdpi），所以构建APK 时自动只包含需要的 dpi 资源，减少 apk 体积。<br>后续还将对 ABIs 和 multi-dex 进行过滤，进一步减小 apk 体积。</p>
<h4 id="Instant-Run"><a href="#Instant-Run" class="headerlink" title="Instant Run"></a>Instant Run</h4><p>算是一项突破性的改进，比正常的开发安装调试周期快50倍。<br>新的 build 流程<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-studio-20/14487811008208.jpg" alt="" title="">
                </div>
                </figure></p>
<p><em>原理：</em></p>
<ul>
<li>只发布更改过的部分</li>
<li>避免安装</li>
<li>无需关闭再重启应用</li>
</ul>
<p><em>应用场景：</em></p>
<ul>
<li>Hot swap</li>
<li>Warm swap</li>
<li>Cold swap</li>
<li>Rebuild&amp;Reinstall<br>在2.0中新建的项目自动开启 Instant Run ，针对老项目需要手动开启。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-studio-20/14487817415883.jpg" alt="" title="">
                </div>
                </figure>
</li>
</ul>
<p>有了这项技术支持，对于 UI 和 Code 的更改，都可以用秒杀的形式反映出来，真正做到即时编程。<br>注意的是 Hot swap 使用的是替换内存技术，如果关闭应用，再打开，还是旧代码。<br>Instant Run 与正常的 Run 和 Debug 同时存在，只是icon 上加了一道闪电。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-studio-20/14487814931362.jpg" alt="" title="">
                </div>
                </figure></p>
<h3 id="Emulator"><a href="#Emulator" class="headerlink" title="Emulator"></a>Emulator</h3><p>难得ADK Team 还记得要改进下这个慢牛模拟器。</p>
<ul>
<li>CPU，支持多核。</li>
<li>GPU，支持 GL ES1.0，将要运行2.0。</li>
<li>I/O，可以向模拟器里拖图片、APK，任意想传的，并且传输速度比 USB 真机快。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-studio-20/14487821405132.jpg" alt="" title="">
                </div>
                </figure></li>
<li>新的 UI，更易操作。</li>
<li>GPS，接收 KML 和 GPX 文件，模拟移动的 GPS 位置。</li>
<li>Network，模拟不同网络类型，如2G，3G等。</li>
<li>支持指纹的模拟。</li>
<li>支持拖动缩放。</li>
<li>横竖屏翻转。</li>
</ul>
<p>模拟器本身还是基于 qemu，不像 Genymtion 基于 virtualbox 那样启动飞快，但还在改进，可以和 Genymotion 配合使用，测试一些最新的系统，不像之前根本不会去用。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>随着 Brillo 发布的临近，相信 Android Studio 在 NDK 以及性能上还有更多的进步，节省开发者的时间，从 Instant Run 上还是看出来有在用心做的，不再只满足于Just work 的状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio 1.5刚推出几天，2.0就正式在 Canary 通道中放了出来，从1到2是一个大的版本升级，最主要就是体现在“快”这一个字上，也就是提速 app 的 build 和 deployment。&lt;/p&gt;
&lt;h2 id=&quot;获取2-0&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="Android" scheme="https://yangbo.tech/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发，不可不知的so文件知识大全</title>
    <link href="https://yangbo.tech/2015/11/27/so-files-guide/"/>
    <id>https://yangbo.tech/2015/11/27/so-files-guide/</id>
    <published>2015-11-27T12:30:35.000Z</published>
    <updated>2015-11-27T14:36:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h1><p>如果你是做Android系统开发，对于so文件应该不会默认；如果是做应用开发，可能更了解jar或<a href="http://alphayang.github.io/2015/10/17/all-about-aar/" target="_blank" rel="external">aar</a>文件，但你也会不经意的在开发中或是要用到的第三库/SDK中看到so的身影，那你应该往下看，全面了解Android应用在运行时的另一个重要文件类型so。</p>
<h1 id="什么是so文件"><a href="#什么是so文件" class="headerlink" title="什么是so文件"></a>什么是so文件</h1><p>so是shared object的缩写，见名思义就是共享的对象，机器可以直接运行的二进制代码。大到操作系统，小到一个专用软件，都离不开so。参见<a href="https://en.wikipedia.org/wiki/Library_(computing" target="_blank" rel="external">https://en.wikipedia.org/wiki/Library_(computing</a>)<br>so主要存在于Unix和Linux系统中。</p>
<h2 id="so-vs-a"><a href="#so-vs-a" class="headerlink" title=".so vs .a"></a>.so vs .a</h2><h3 id="a-archive"><a href="#a-archive" class="headerlink" title=".a:archive"></a>.a:archive</h3><p>存档的含义，是unix系统中对于静态库的文件后缀，在软件打包时和主程序表态链接在一起，表现形式是在链接成同一个文件。<a href="https://www.golang.org" target="_blank" rel="external">go lang</a>即广泛采用这一形式，对于软件分发只有一个文件。对于打包好的软件来讲，这是专属库，所有都在出厂前打包在一起了，好处是不受外界影响，坏处是任何改动要全部分发。对于安装应用的系统来讲，当然是共享的越多越好，既省内存又省硬盘。</p>
<h3 id="so-shared-object"><a href="#so-shared-object" class="headerlink" title=".so:shared object"></a>.so:shared object</h3><p>共享库，用过Windows的同学应该都或多或少碰到过找不到DLL或DLL错误之类的问题，其中最为著名的问题就是DLL Hell（某个著名的库，软件a使用1.0，新装的软件b使用1.0.1，导致软件a运行异常），DLL即Dynamic Link Library的缩写，和shared object表示同样的事物，只是名字不同而已。运行时按需加载，不论是系统提供的共享库还是自带的共享库，最大化利用软件分治的原理，修Bug也是更新所在so文件，不需全部更新。</p>
<h2 id="Android中的so"><a href="#Android中的so" class="headerlink" title="Android中的so"></a>Android中的so</h2><p>so是与平台相关的二进制机器码，与ABI（Application Binary Interface）相对应，一个ABI表示相应的CPU的指令集与内存页管理，也对应于不同的C运行环境，所以so是有不同的系统版本的。<br>随着Android系统的快速发展，搭载Android的硬件平台也早已多样化了（对比WinTel联盟，直到2012年才新发展了Windows RT来适配ARM平台，2015年的Win10才进入 Raspberry Pi 2这类基于ARM的新型设备中），现在已经运行在7个ABI：armeabi，armeabi-v7a (armeabi-v7a-hard)，arm64-v8a，x86，x86_64，mips 和 mips64。</p>
<h1 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h1><p>上面主要从软件开发的角度说明了为什么设计so以及开发者为什么使用so，由于Android基于Linux Kernl的，也继承了Linux中所有so相关的设计。除了系统方面的原因，Android开发者还要知道以下几点：</p>
<ul>
<li>so机制让开发者最大化利用已有的C和C++代码，达到重用的效果，利用软件世界积累了几十年的优秀代码</li>
<li>so是二进制，没有解释编译的开消，用so实现的功能比纯java实现的功能要快</li>
<li>so内存分配不受Dalivik/ART的单个应用限制，减少OOM<br>基于以上的各种好处，so在Android开发中大量使用，利用<a href="https://play.google.com/store/apps/details?id=com.xh.nativelibsmonitor.app" target="_blank" rel="external">Native Lib Monitor</a>可以看到：<br>微信（将近30个）：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/so_in_wechat.png" alt="so" title="">
                </div>
                </figure>
Google Drive：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/so_in_drive.png" alt="so" title="">
                </div>
                </figure>
Youtube:<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/so_in_youtube.png" alt="so" title="">
                </div>
                </figure>
</li>
</ul>
<p><em>PS1</em>：从Youtube中的so文件可以看出安装后的应用混合使用arm和arm64两种ABI，体现了硬件的兼容性。ARM64和X86可以运行ARMv7，X86对ARMv7采用软件兼容，在CPU层面多一个指令集翻译环节，所以如果你是so文件的提供者，就算是增加工作量，也最好提供覆盖全渐ABI，让最终APP的性能不因为你而打折，这一点非常重要；作为应用开发者，在有选择的情况下，尽量选用覆盖全部ABI的库，体现为背后的技术实力。<br><em>PS2</em>：一个APK包中可以包含多个ABI的Library，而Android在安装APK时，会选择与自己最匹配的ABI安装到应用中。<br><em>PS3</em>：由PS1引发的一个问题：深爱广大Android开发者喜欢的Genymotion模拟器是基于virtualbox的x86架构，如果使用了不含x86 ABI的so库，就不能安装到Genymtion中。另外，如果Genymotion没有提供Play Service，如果开发需要的话，要安装Googel Apps x86。可以到<a href="https://basketbuild.com/gapps" target="_blank" rel="external"></a>根据你的模拟器系统版本下载合适的安装包，直接把下载好的zip包拖到Genymtion模拟器中，赚慢的话，也可以直接从我的<a href="http://pan.baidu.com/s/1hqrWNi8" target="_blank" rel="external">百度网盘</a>下载。</p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><ul>
<li>Android Studio，将得到的ABI放到jniLibs/ABI<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">├── AndroidManifest.xml</div><div class="line">└── jniLibs</div><div class="line">    ├── armeabi</div><div class="line">    │   └── libsnappydb-native.so</div><div class="line">    ├── armeabi-v7a</div><div class="line">    │   └── libsnappydb-native.so</div><div class="line">    ├── mips</div><div class="line">    │   └── libsnappydb-native.so</div><div class="line">    └── x86</div><div class="line">        └── libsnappydb-native.so</div></pre></td></tr></table></figure>
</li>
</ul>
<p>或者使用jniLibs.srcDir属性指定：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    <span class="built_in">source</span>Sets &#123;</div><div class="line">        main &#123;</div><div class="line">            jni.srcDirs = [] //<span class="built_in">disable</span> automatic ndk-build call</div><div class="line">            jniLibs.srcDir <span class="string">'main/libs'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>eclipse中直接放到libs/ABI目录。</li>
<li>在<a href="http://alphayang.github.io/2015/10/17/all-about-aar/" target="_blank" rel="external">aar</a>文件中，so处于jni/ABI目录中，对于库开发者和应用开发者都不必关注，全部自动处理。</li>
<li>在生成的APK中，所有so文件对应于lib/ABI中。</li>
<li>当APK安装到Android系统中时，so文件位置:<br><strong>Android&lt;5.0，/data/data/PACKAGE_NAME/lib</strong><br><strong>Android&gt;=5.0，/data/app/PACKAGE_NAME/lib/CPU_ARCH/和/data/data/PACKAGE_NAME/lib</strong></li>
</ul>
<h1 id="可能会出现的问题"><a href="#可能会出现的问题" class="headerlink" title="可能会出现的问题"></a>可能会出现的问题</h1><p>使用了so本地库后，开发者可能会遇到“UnsatisfiedLinkError”，“dlopen: failed”等等能看见的问题，还会引发应用崩溃或性能低下等更隐蔽的问题。</p>
<h1 id="避免问题的途径"><a href="#避免问题的途径" class="headerlink" title="避免问题的途径"></a>避免问题的途径</h1><h2 id="主要针对so文件的提供者："><a href="#主要针对so文件的提供者：" class="headerlink" title="主要针对so文件的提供者："></a>主要针对so文件的提供者：</h2><ul>
<li>请尽量覆盖全部ABI</li>
<li>Android NDK向前但不向后兼容，可以适当忽略“compile against the latest platform”这类优化提示。简单说，利用NDK针对android-17生成的so文件可以在android-22上运行，反之却不行。这点与Android SDK的兼容性不一样，在SDK14上编译的应用，在API23上也是可以运行的；在SDk23上的编译的应用，只要minSdkVersion小于14，同样在API14上可以运行。.</li>
</ul>
<h2 id="对于采用so的应用开发者"><a href="#对于采用so的应用开发者" class="headerlink" title="对于采用so的应用开发者"></a>对于采用so的应用开发者</h2><p>尽量保证你所使用的so文件编译编译的一致性，要了解你使用的库，在选择新库时要全面考虑。</p>
<h1 id="针对Google-Play进行分ABI上传"><a href="#针对Google-Play进行分ABI上传" class="headerlink" title="针对Google Play进行分ABI上传"></a>针对Google Play进行分ABI上传</h1><p>上文中提到尽量使用覆盖全部ABI的库，其直接结果是让APK变大了好多，显然增加上用户下载负担，因为最终只会用到一个ABI，而下载的其它ABI就白白浪费了。<br>我们来看Google的明星产品Maps是如何做的。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/gmaps_apk_size_info.png" alt="gmaps_apk_size_info" title="">
                </div>
                </figure><br>用户下载的安装包大小是不固定的，也就是根据用户设备的ABI自动选择相应的安装包。这是Google Play开发者和用户提供的一大功能。<br>做为开发者，可以很方便的生成ABI对应的APK，只需在Module/build.gralde中添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">	...</div><div class="line">	 splits &#123;</div><div class="line">        abi &#123;</div><div class="line">            <span class="built_in">enable</span> <span class="literal">true</span></div><div class="line">            reset()</div><div class="line">            include <span class="string">'x86'</span>, <span class="string">'x86_64'</span>, <span class="string">'armeabi-v7a'</span>, <span class="string">'arm64-v8a'</span> //select ABIs to build APKs <span class="keyword">for</span></div><div class="line">            //universalApk <span class="literal">true</span> //generate an additional APK that contains all the ABIs</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	    // map <span class="keyword">for</span> the version code</div><div class="line">    project.ext.versionCodes = [<span class="string">'armeabi'</span>: 1, <span class="string">'armeabi-v7a'</span>: 2, <span class="string">'arm64-v8a'</span>: 3, <span class="string">'mips'</span>: 5, <span class="string">'mips64'</span>: 6, <span class="string">'x86'</span>: 8, <span class="string">'x86_64'</span>: 9]</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    android.applicationVariants.all &#123; variant -&gt;</div><div class="line">        // assign different version code <span class="keyword">for</span> each output</div><div class="line">        variant.outputs.each &#123; output -&gt;</div><div class="line">            output.versionCodeOverride =</div><div class="line">                    project.ext.versionCodes.get(output.getFilter(</div><div class="line">                            com.android.build.OutputFile.ABI), 0) * 1000000 + android.defaultConfig.versionCode</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生成的APKs：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/multi_abi_apks.png" alt="multi_abi_apks.png" title="">
                </div>
                </figure><br>上传Google Play Developer Console时使用<em>Advnaced Mode</em>：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/upload_apks_adv_mode.png" alt="upload_apks_adv_mode.png" title="">
                </div>
                </figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Android开发给我们开发者提供了so这样一种机制，掌握它，利用它，让你的开发工作变得更轻松，让你写出的应用运行更流畅。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/we_are_just_begining.png" alt="we_are_just_begining.png" title="">
                </div>
                </figure></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="http://stackoverflow.com/questions/9688200/difference-between-shared-objects-so-static-libraries-a-and-dlls-so" target="_blank" rel="external">http://stackoverflow.com/questions/9688200/difference-between-shared-objects-so-static-libraries-a-and-dlls-so</a><br><a href="http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html" target="_blank" rel="external">http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html</a><br><a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html" target="_blank" rel="external">http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html</a><br><a href="https://developer.android.com/ndk/guides/abis.html" target="_blank" rel="external">https://developer.android.com/ndk/guides/abis.html</a><br><a href="https://software.intel.com/en-us/blogs/2012/11/12/how-to-publish-your-apps-on-google-play-for-x86-based-android-devices-using" target="_blank" rel="external">https://software.intel.com/en-us/blogs/2012/11/12/how-to-publish-your-apps-on-google-play-for-x86-based-android-devices-using</a><br><a href="http://stackoverflow.com/questions/31666412/how-to-order-multiple-apks-with-native-libraries-in-google-play-store" target="_blank" rel="external">http://stackoverflow.com/questions/31666412/how-to-order-multiple-apks-with-native-libraries-in-google-play-store</a><br><a href="http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits</a><br><a href="https://androidbycode.wordpress.com/2015/07/07/android-ndk-a-guide-to-deploying-apps-with-native-libraries/" target="_blank" rel="external">https://androidbycode.wordpress.com/2015/07/07/android-ndk-a-guide-to-deploying-apps-with-native-libraries/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引论&quot;&gt;&lt;a href=&quot;#引论&quot; class=&quot;headerlink&quot; title=&quot;引论&quot;&gt;&lt;/a&gt;引论&lt;/h1&gt;&lt;p&gt;如果你是做Android系统开发，对于so文件应该不会默认；如果是做应用开发，可能更了解jar或&lt;a href=&quot;http://alphay
    
    </summary>
    
      <category term="develope" scheme="https://yangbo.tech/categories/develope/"/>
    
      <category term="android" scheme="https://yangbo.tech/categories/develope/android/"/>
    
    
      <category term="Andorid" scheme="https://yangbo.tech/tags/Andorid/"/>
    
      <category term="Gradle" scheme="https://yangbo.tech/tags/Gradle/"/>
    
      <category term="Andorid Studio" scheme="https://yangbo.tech/tags/Andorid-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Hack Andorid，使设备变身专用信息显示屏</title>
    <link href="https://yangbo.tech/2015/11/25/hack-android-for-display-only/"/>
    <id>https://yangbo.tech/2015/11/25/hack-android-for-display-only/</id>
    <published>2015-11-25T11:30:35.000Z</published>
    <updated>2015-11-27T14:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h1><p>机场、车站、高速服务区随处可见信息显示屏，有的高悬只做单向显示，有的在地面只可在屏幕上进行操作如导航、查询等，在Andorid之前这块是嵌入式以及Win Embed的领域。现在Android设备的成本以及性能，Andorid App开发技术和开发人员的丰富，用Android驱动信息展示机已是更为合理的趋势。</p>
<p>在这类设备上，绝大多数都是使用物理遮盖或硬件定制，将正常的Andorid系统所必需的控制按键进行了处理，使用过程中普通用户接触不到控制键，达到专用（不可退出，只能使用既定功能）的上的。</p>
<p>我们现在就来看看如何把一个正常的Android设备，通过软件Hack的方式，打造成这类的专用设备。</p>
<p>PS:Google官方的Cardboard应用即属此类，交互方式只剩下一个按垫片了。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>Andorid系统本身是为移动设备开发的，包括UI和硬件交互设施：</p>
<ul>
<li>返回键</li>
<li>Home键</li>
<li>应用切换键</li>
<li>音量键</li>
<li>电源键<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android_control_buttons.png" alt="android_control_buttons" title="">
                </div>
                </figure>
</li>
</ul>
<p>除了屏蔽按键，应用需要系统启动后自动启动。<br>UI根据需要按照App正常开发方法进行裁剪。</p>
<p>还需要注意的点：</p>
<ul>
<li>健全的退出机制（任何情况下都要有的设计，类似后门）</li>
<li>普通用户必须知道如何退出，特别是通过应用商店分发（定制化场景不考虑退出）</li>
<li>软件方式只能覆盖一些应用场景，效果也不是最好，软硬结合才是王道。</li>
</ul>
<h1 id="Happy-Hack"><a href="#Happy-Hack" class="headerlink" title="Happy Hack"></a>Happy Hack</h1><p>##准备<br>添加MyApplication全局入口<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.geekdev.alpha.hack4andriodbuttons.MyApplication"</span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>添加一个MainActivity<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.geekdev.alpha.hack4andriodbuttons.MainActivity"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>利用SharedPreference添加一个开关,Preference.java:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreferenceUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREF_NoButtons_MODE = <span class="string">"pref_NoButtons_mode"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNoButtonsModeActive</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</div><div class="line">        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);</div><div class="line">        <span class="keyword">return</span> sp.getBoolean(PREF_NoButtons_MODE, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNoButtonsModeActive</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> active, <span class="keyword">final</span> Context context)</span> </span>&#123;</div><div class="line">        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);</div><div class="line">        sp.edit().putBoolean(PREF_NoButtons_MODE, active).commit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h2><p>在Android.manifest中添加权限和Receiver：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>添加启动广播Receiver：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.geekdev.alpha.hack4andriodbuttons.BootReceiver"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p> BootReceiver.java:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Intent myIntent = <span class="keyword">new</span> Intent(context, MainActivity.class);</div><div class="line">        myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        context.startActivity(myIntent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="返回键"><a href="#返回键" class="headerlink" title="返回键"></a>返回键</h2><p>重写MainActivity中的onBackPressed方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">       Log.i(TAG,<span class="string">"can't back"</span>);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="Home键"><a href="#Home键" class="headerlink" title="Home键"></a>Home键</h2><p>重头戏，由于Android不允许改变Home键的行为，所以只能做一些Workaround来绕过限制。<br>起一个Service，作为守护Service，死循环，每隔3s检查应用是否在前台运行，没有运行则唤醒。由于Android设置了Home键放开后延迟5s才执行Service起动Activity的逻辑，小于5s的轮询都可以，为了绕过这个5s限制，ROOT后的系统把应用移动到/system/app且取”android.permission.STOP_APP_SWITCHES”权限。当然如果硬件上把Home键做处理，就自然不会有这个5s延迟了。<br>在AndroidManifest中声明Service：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">service</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">"com.geekdev.alpha.hack4andriodbuttons.NoButtonsService"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"false"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在MyApplication应用启动时启动NoButtonsService：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        instance = <span class="keyword">this</span>;</div><div class="line">        startNoButtonsService();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startNoButtonsService</span><span class="params">()</span> </span>&#123;</div><div class="line">        startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, NoButtonsService.class));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在NoButtonsService中实现守护逻辑:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoButtonsService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> INTERVAL = TimeUnit.SECONDS.toMillis(<span class="number">3</span>);</div><div class="line">    <span class="comment">// 3s 轮询</span></div><div class="line">    <span class="comment">// Home button pressed, user app service has 5s delay in order to make sure user has full choice</span></div><div class="line">    <span class="comment">//if the system is rooted, move user app to system app, 5s delay removed</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = NoButtonsService.class.getSimpleName();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Thread t = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> Context ctx = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"Stopping service 'NoButtonsService'"</span>);</div><div class="line">        running =<span class="keyword">false</span>;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"Starting service 'NoButtonsService'"</span>);</div><div class="line">        running = <span class="keyword">true</span>;</div><div class="line">        ctx = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="comment">// start a thread that periodically checks if your app is in the foreground</span></div><div class="line">        t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    handleNoButtonsMode();</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(INTERVAL);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        Log.i(TAG, <span class="string">"Thread interrupted: 'NoButtonsService'"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">while</span>(running);</div><div class="line">                stopSelf();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t.start();</div><div class="line">        <span class="keyword">return</span> Service.START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleNoButtonsMode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// is NoButtons Mode active?</span></div><div class="line">        <span class="keyword">if</span>(PreferenceUtils.isNoButtonsModeActive(ctx)) &#123;</div><div class="line">            <span class="comment">// is App in background?</span></div><div class="line">            <span class="keyword">if</span>(isInBackground()) &#123;</div><div class="line">                restoreApp(); <span class="comment">// restore!</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isInBackground</span><span class="params">()</span> </span>&#123;</div><div class="line">        ActivityManager am = (ActivityManager) ctx.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line"></div><div class="line">        List&lt;ActivityManager.RunningTaskInfo&gt; taskInfo = am.getRunningTasks(<span class="number">1</span>);</div><div class="line">        ComponentName componentInfo = taskInfo.get(<span class="number">0</span>).topActivity;</div><div class="line">        <span class="keyword">return</span> (!ctx.getApplicationContext().getPackageName().equals(componentInfo.getPackageName()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restoreApp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Restart activity</span></div><div class="line">        Intent i = <span class="keyword">new</span> Intent(ctx, MainActivity.class);</div><div class="line">        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        ctx.startActivity(i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="应用切换键"><a href="#应用切换键" class="headerlink" title="应用切换键"></a>应用切换键</h2><p>在MainActivity中重写onPause方法，直接用ActivityManager把MainActivity放在最前：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onPause();</div><div class="line"></div><div class="line">       ActivityManager activityManager = (ActivityManager) getApplicationContext()</div><div class="line">               .getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line"></div><div class="line">       activityManager.moveTaskToFront(getTaskId(), <span class="number">0</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>别忘了添加权限：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.REORDER_TASKS"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="音量键"><a href="#音量键" class="headerlink" title="音量键"></a>音量键</h2><p>在MainActivity中定义音量键并重写dispatchKeyEvent:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> List blockedKeys = <span class="keyword">new</span> ArrayList(Arrays.asList(KeyEvent.KEYCODE_VOLUME_DOWN, KeyEvent.KEYCODE_VOLUME_UP));</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (blockedKeys.contains(event.getKeyCode())) &#123;</div><div class="line">    <span class="comment">//检测到音量键直接return</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchKeyEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="电源键"><a href="#电源键" class="headerlink" title="电源键"></a>电源键</h2><h3 id="短按"><a href="#短按" class="headerlink" title="短按"></a>短按</h3><p>短按是为了关闭屏幕，监听OnScreenOff的系统广播，在应用启动时注册。<br>OnScreenOffRecever：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnScreenOffReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(Intent.ACTION_SCREEN_OFF.equals(intent.getAction()))&#123;</div><div class="line">            MyApplication ctx = (MyApplication) context.getApplicationContext();</div><div class="line">            <span class="comment">// is NoButtons Mode active?</span></div><div class="line">            <span class="keyword">if</span>(PreferenceUtils.isNoButtonsModeActive(ctx)) &#123;</div><div class="line">                wakeUpDevice(ctx);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">wakeUpDevice</span><span class="params">(MyApplication context)</span> </span>&#123;</div><div class="line">        PowerManager.WakeLock wakeLock = context.getWakeLock(); <span class="comment">// get WakeLock reference via MyApplication</span></div><div class="line">        <span class="keyword">if</span> (wakeLock.isHeld()) &#123;</div><div class="line">            wakeLock.release(); <span class="comment">// release old wake lock</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// create a new wake lock...</span></div><div class="line">        wakeLock.acquire();</div><div class="line"></div><div class="line">        <span class="comment">// ... and release again</span></div><div class="line">        wakeLock.release();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>应用启动时注册:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MyApplication instance;</div><div class="line">    <span class="keyword">private</span> PowerManager.WakeLock wakeLock;</div><div class="line">    <span class="keyword">private</span> OnScreenOffReceiver onScreenOffReceiver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        instance = <span class="keyword">this</span>;</div><div class="line">        registerNoButtonsModeScreenOffReceiver();</div><div class="line">        startNoButtonsService();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerNoButtonsModeScreenOffReceiver</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// register screen off receiver</span></div><div class="line">        <span class="keyword">final</span> IntentFilter filter = <span class="keyword">new</span> IntentFilter(Intent.ACTION_SCREEN_OFF);</div><div class="line">        onScreenOffReceiver = <span class="keyword">new</span> OnScreenOffReceiver();</div><div class="line">        registerReceiver(onScreenOffReceiver, filter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> PowerManager.<span class="function">WakeLock <span class="title">getWakeLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(wakeLock == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// lazy loading: first call, create wakeLock via PowerManager.</span></div><div class="line">            PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);</div><div class="line">            wakeLock = pm.newWakeLock(PowerManager.ACQUIRE_CAUSES_WAKEUP, <span class="string">"wakeup"</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> wakeLock;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startNoButtonsService</span><span class="params">()</span> </span>&#123; </div><div class="line">        startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, NoButtonsService.class));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>别忘了添加WAKE_LOCK权限：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="长按"><a href="#长按" class="headerlink" title="长按"></a>长按</h3><p>长按是为了关机，直接把系统的关机弹出对话框处理掉，这里只要系统对话框都关掉。<br>在MainActivity中重写onWindowFocusChanged焦点变化时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onWindowFocusChanged(hasFocus);</div><div class="line">        <span class="keyword">if</span>(!hasFocus) &#123;</div><div class="line">            <span class="comment">// Close every kind of system dialog</span></div><div class="line">            Intent closeDialog = <span class="keyword">new</span> Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);</div><div class="line">            sendBroadcast(closeDialog);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="防止屏幕自动关闭屏幕"><a href="#防止屏幕自动关闭屏幕" class="headerlink" title="防止屏幕自动关闭屏幕"></a>防止屏幕自动关闭屏幕</h2><p>在Layout文件中添加为根视图添加属性:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:keepScreenOn="true"</div></pre></td></tr></table></figure></p>
<p>在MainActivity的onCreate方法中添加，要放在setContentView之前:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class="line">getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);</div></pre></td></tr></table></figure></p>
<h2 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h2><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><p>放在MainActivity的onResume而不是onCreate，避免开关关闭后，离开应用而应用没有被系统回收，再次打开应用时onCreate没有开启开关。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        PreferenceUtils.setNoButtonsModeActive(<span class="keyword">true</span>, getApplicationContext());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>设置一个Button监听事件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Button fab = (Button) findViewById(R.id.hiddenExitButton);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                PreferenceUtils.setNoButtonsModeActive(<span class="keyword">false</span>, getApplicationContext());</div><div class="line">                Snackbar.make(view, <span class="string">"可以退出了"</span>, Snackbar.LENGTH_SHORT)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>我们通过以上Hack步骤，将一个Android设备变成了专用机，可以看到Android以其独特的开放特性可以覆盖足够多的使用场景，也符合Google提出的Android is everywhere的口号。</p>
<p>项目地址：<a href="https://github.com/alphayang/HackAndroid4NoButtons" target="_blank" rel="external">github</a></p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://developer.android.com/intl/zh-cn/reference/android/view/WindowManager.LayoutParams.html#FLAG_DISMISS_KEYGUARD" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/reference/android/view/WindowManager.LayoutParams.html#FLAG_DISMISS_KEYGUARD</a><br><a href="http://developer.android.com/intl/zh-cn/training/scheduling/wakelock.html" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/training/scheduling/wakelock.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引论&quot;&gt;&lt;a href=&quot;#引论&quot; class=&quot;headerlink&quot; title=&quot;引论&quot;&gt;&lt;/a&gt;引论&lt;/h1&gt;&lt;p&gt;机场、车站、高速服务区随处可见信息显示屏，有的高悬只做单向显示，有的在地面只可在屏幕上进行操作如导航、查询等，在Andorid之前这块是嵌入
    
    </summary>
    
      <category term="develop" scheme="https://yangbo.tech/categories/develop/"/>
    
    
      <category term="Android" scheme="https://yangbo.tech/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>利用 Street View API 制作街景小动画</title>
    <link href="https://yangbo.tech/2015/11/15/gif-movie-by-street-view-api/"/>
    <id>https://yangbo.tech/2015/11/15/gif-movie-by-street-view-api/</id>
    <published>2015-11-15T11:30:35.000Z</published>
    <updated>2015-11-15T12:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>Google街景小车开启了地图与现实结合的大门，也让我们可以利用 Google Maps 浏览全世界的美丽风光。街景车采集的数据简单来说就是加了经纬度的图片，我们也可以利用这些图片来制作街景小动画，上香港示例（大陆没有Google 街景数据）：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/hongkong_street_view.gif" alt="movie" title="">
                </div>
                </figure></p>
<h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>使用 Direction API 进行两地间导航，利用 Street View API 将街景图片预加载，使用了 <a href="https://github.com/TeehanLax/Hyperlapse.js/" target="_blank" rel="external">Hyperlaps.js</a>，Hyperlapse.js依赖 GSVPano 和 three 两个 js 库。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Simple Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maps.googleapis.com/maps/api/js?v=3.exp"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/three.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/GSVPano.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/Hyperlapse.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">			<span class="keyword">var</span> hyperlapse = <span class="keyword">new</span> Hyperlapse(<span class="built_in">document</span>.getElementById(<span class="string">'pano'</span>), &#123;</div><div class="line">				<span class="attr">lookat</span>: <span class="keyword">new</span> google.maps.LatLng(<span class="number">37.81409525128964</span>,<span class="number">-122.4775045005249</span>),</div><div class="line">				<span class="attr">zoom</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">use_lookat</span>: <span class="literal">true</span>,</div><div class="line">				<span class="attr">elevation</span>: <span class="number">50</span></div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			hyperlapse.onError = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">				<span class="built_in">console</span>.log(e);</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			hyperlapse.onRouteComplete = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">				hyperlapse.load();</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			hyperlapse.onLoadComplete = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">				hyperlapse.play();</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			<span class="comment">// Google Maps API stuff here...</span></div><div class="line">			<span class="keyword">var</span> directions_service = <span class="keyword">new</span> google.maps.DirectionsService();</div><div class="line">			<span class="comment">//设置起始点，进行导航</span></div><div class="line">			<span class="keyword">var</span> route = &#123;</div><div class="line">				<span class="attr">request</span>:&#123;</div><div class="line">					<span class="attr">origin</span>: <span class="keyword">new</span> google.maps.LatLng(<span class="number">22.2962259</span>,<span class="number">114.1724561</span>),</div><div class="line">					<span class="attr">destination</span>: <span class="keyword">new</span> google.maps.LatLng(<span class="number">22.3025739</span>,<span class="number">114.1720511</span>),</div><div class="line">					<span class="attr">travelMode</span>: google.maps.DirectionsTravelMode.DRIVING</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			directions_service.route(route.request, <span class="function"><span class="keyword">function</span>(<span class="params">response, status</span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span> (status == google.maps.DirectionsStatus.OK) &#123;</div><div class="line">					hyperlapse.generate( &#123;<span class="attr">route</span>:response&#125; );</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					<span class="built_in">console</span>.log(status);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="built_in">window</span>.onload = init;</div><div class="line">		</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pano"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Git-仓库"><a href="#Git-仓库" class="headerlink" title="Git 仓库"></a>Git 仓库</h2><p><a href="https://github.com/alphayang/hongkong_fast_street_view" target="_blank" rel="external">https://github.com/alphayang/hongkong_fast_street_view</a></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>新车试驾，旅游规则，展览。。。</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>加载 maps api 需<strong>科学上网</strong>，加载图片时间视需下载街景图片数据而不同，由于是全部下载完成再开始播放，需要些耐心。<br>由于国内 google maps api 还没有街景资源，此处不能用使用国内<a href="http://www.google.cn/maps/api/js" target="_blank" rel="external">http://www.google.cn/maps/api/js</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;Google街景小车开启了地图与现实结合的大门，也让我们可以利用 Google Maps 浏览全世界的美丽风光。街景车采集的数据简单来说就是
    
    </summary>
    
    
      <category term="Google Maps api" scheme="https://yangbo.tech/tags/Google-Maps-api/"/>
    
  </entry>
  
  <entry>
    <title>向Google学习，打造安全的服务</title>
    <link href="https://yangbo.tech/2015/11/14/service-side-security-from-google/"/>
    <id>https://yangbo.tech/2015/11/14/service-side-security-from-google/</id>
    <published>2015-11-14T02:39:21.000Z</published>
    <updated>2015-11-15T10:34:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><h2 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h2><p>邮箱过亿数据泄漏（涉及邮箱账号/密码/用户密保等）<br><a href="http://www.wooyun.org/bugs/wooyun-2015-0147763" target="_blank" rel="external">http://www.wooyun.org/bugs/wooyun-2015-0147763</a><br>如果重大的安全事件，发生在曾经的三大门户之一并且是唯一以工程师起家的服务上，实在是让人心寒。互联网已经是现代生活的基础，基础设施的安全关系到我们每一个人，开发者，普通使用者。开发者对安全应该有更高的要求，更高的追求。</p>
<h2 id="携程"><a href="#携程" class="headerlink" title="携程"></a>携程</h2><p><a href="http://baike.baidu.com/link?url=VqJyVb-I1Mp1zmE9cvnJHkTi5bosetZnbdZckm1jAE3d504TKSIApN34n7iS1aBl188cfLl9r1CgYho5lJRMNJ7vH_O0Pvp0u1aey1UzFmybw-mMV_AWicnE8sgJcOWFAB0bMZceKn-LdGWQaxQzhlKqb9TIgrxxfqDGiJBeUPu" target="_blank" rel="external">携程的安全事件</a><br>2015年5月28日11时许，携程网官网出现大面积瘫痪，网页版和手机APP均不能正常使用。携程方面对此回应称服务器遭到不明攻击。<br>5月28日22:45，携程官方回应称，经技术人员抢修，除个别业务外，携程官方网站及APP恢复正常，经过排查，携程郑重声明，数据没有丢失，预订数据也保存完整。</p>
<h2 id="Google-的安全"><a href="#Google-的安全" class="headerlink" title="Google 的安全"></a>Google 的安全</h2><p>榜样的力量是无穷的，对于安全，处于互联网最前沿的Google面临着更复杂更险峻的挑战，迄今为止，Google还没有发生严重的安全事件，那么从技术从业者的角度来向行业标杆看齐，让用户信息更安全。</p>
<h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><h2 id="自建机房"><a href="#自建机房" class="headerlink" title="自建机房"></a>自建机房</h2><p>由于极快速的成长，IDC及托管很快不能满足Google的需要，开始自建机房。对于机房建设，Google相对比较开放，机房位置，内部运作流程以及使用到的技术都有公开。<br><a href="https://www.google.com/about/datacenters/gallery/#/" target="_blank" rel="external">https://www.google.com/about/datacenters/gallery/#/</a><br><a href="http://www.google.com/about/datacenters/inside/streetview/" target="_blank" rel="external">http://www.google.com/about/datacenters/inside/streetview/</a></p>
<p>机房涉及到的安全威胁就是人为的入侵，提高安保水平，更主要是让入侵白忙活，从软件系统设计上进行加密。</p>
<p><strong>高标准入侵演习</strong><br>外星人入侵<br><a href="http://thenextweb.com/google/2011/08/23/alien-attacks-california-destruction-just-part-of-googles-disaster-recovery-plan/" target="_blank" rel="external">http://thenextweb.com/google/2011/08/23/alien-attacks-california-destruction-just-part-of-googles-disaster-recovery-plan/</a></p>
<h2 id="自造服务器"><a href="#自造服务器" class="headerlink" title="自造服务器"></a>自造服务器</h2><p>很多开发者都有过攒机的经历，这也是体现“技术”的地方，硬件定制化，以最经济的成本满足特定的需求。那么Google作为技术性创业的典范，从诞生起就对它的硬件环境进行了定制。从市场上采购性价比最高的廉价PC配件，自行组装。下图是收藏于San Francisco Computer History Museum的最早的Google机柜，曾经仔细观察过内部，1999年左右使用4G的硬盘，回想当时动辄过万的联想家用PC也只有256M的硬盘，在美帝和硅谷占尽先机，相同条件下硬件设备的价格以及相应人才优势。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/google_server_v1.jpg" alt="google_server" title="">
                </div>
                </figure><br>零星的公开了一些信息：<br><a href="http://www.cnet.com/news/google-uncloaks-once-secret-server-10209580/" target="_blank" rel="external">http://www.cnet.com/news/google-uncloaks-once-secret-server-10209580/</a><br>在WikiPekia上有一些Google server的硬件概况：<br><a href="https://en.wikipedia.org/wiki/Google_platform" target="_blank" rel="external">https://en.wikipedia.org/wiki/Google_platform</a></p>
<p>在Google Compute Engine的类型说明中，可以看到CPU和总线的影子：<br><a href="https://cloud.google.com/compute/docs/machine-types" target="_blank" rel="external">https://cloud.google.com/compute/docs/machine-types</a></p>
<p><strong>Google Search Appliance</strong><br>值得一提的是Google的这一款企业级搜索一体机产品，将机箱放到自己的网络环境里，就可以工作，用来索引内部或外部资源。<br>先爆照：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/Google_Appliance.jpg" alt="gsa_img" title="">
                </div>
                </figure><br>根据Google和Dell的官方描述，服务器是由Dell OEM的。可以看来，Google负责根据需要设计和提需求，找硬件厂商OEM是现在Google Server最可能的一种生产形式。<br><a href="https://support.google.com/gsa/answer/6055109?hl=en" target="_blank" rel="external">https://support.google.com/gsa/answer/6055109?hl=en</a><br><a href="http://www.dell.com/downloads/global/power/2009-google-10008089.pdf" target="_blank" rel="external">http://www.dell.com/downloads/global/power/2009-google-10008089.pdf</a></p>
<p>有兴趣的同学还可以到eBay上买到这类机器<br><a href="http://www.ebay.com/bhp/google-server" target="_blank" rel="external">http://www.ebay.com/bhp/google-server</a></p>
<p>PS：Google从来没有公开披露过自己的服务器数量，小道消息是：超过500万台，全球排在Top 5服务器制造商中。<br>PS：经常听说一些大厂为了数据安全，将所有USB口用胶水封死，也算是做到了制定计算设备的目的。</p>
<h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><p>使用自己裁剪的Linux版本，从软件栈的底层开始控制安全风险。<br><a href="https://www.quora.com/What-operating-system-do-Google-use-for-their-servers" target="_blank" rel="external">https://www.quora.com/What-operating-system-do-Google-use-for-their-servers</a><br><a href="https://github.com/googlegsa/mirror.72/tree/master/rpm" target="_blank" rel="external">https://github.com/googlegsa/mirror.72/tree/master/rpm</a></p>
<h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><p>所有的数据最终都存储在硬盘上，跟踪每一块硬盘的位置和状态，对于坏损硬盘执行销毁流程。<br><a href="https://www.google.com/about/datacenters/inside/data-security/" target="_blank" rel="external">https://www.google.com/about/datacenters/inside/data-security/</a><br>销毁方式：<br><a href="https://www.youtube.com/watch?v=wNyFhZTSnPg" target="_blank" rel="external">https://www.youtube.com/watch?v=wNyFhZTSnPg</a><br>Google Cloud Storage，进行AES-256加密，由用户提供key。<br><a href="https://cloud.google.com/compute/docs/disks/customer-supplied-encryption" target="_blank" rel="external">https://cloud.google.com/compute/docs/disks/customer-supplied-encryption</a><br><a href="http://www.theverge.com/2013/8/16/4627232/google-cloud-storage-automated-128-bit-aes-security" target="_blank" rel="external">http://www.theverge.com/2013/8/16/4627232/google-cloud-storage-automated-128-bit-aes-security</a><br>对Google Drive中的文件，也进行了加密。<br><a href="https://www.boxcryptor.com/en/google-drive" target="_blank" rel="external">https://www.boxcryptor.com/en/google-drive</a><br>多区域分布式存储和备份，保证全球的数据访问。<br>PS：对于个人用户，Gmail的存储并没有说明是否加密。</p>
<h1 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h1><h2 id="持续投入"><a href="#持续投入" class="headerlink" title="持续投入"></a>持续投入</h2><p>400+全职安全工程师，养了不少安全大牛。<br>拿钱砸，直接买公司。<br><a href="http://tech.firstpost.com/news-analysis/google-picks-indian-connect-startup-imperium-216605.html" target="_blank" rel="external">http://tech.firstpost.com/news-analysis/google-picks-indian-connect-startup-imperium-216605.html</a><br><a href="http://www.computerworld.com/article/2472903/cloud-computing/why-google-bought-virustotal.html" target="_blank" rel="external">http://www.computerworld.com/article/2472903/cloud-computing/why-google-bought-virustotal.html</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/service-side-security-from-google/14457787722400.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="工程能力"><a href="#工程能力" class="headerlink" title="工程能力"></a>工程能力</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/google_engine_stats.png" alt="google_engine_stats.png" title="">
                </div>
                </figure>
<h2 id="员工审计和最小权限"><a href="#员工审计和最小权限" class="headerlink" title="员工审计和最小权限"></a>员工审计和最小权限</h2><p>一切的访问活动都以最小权限开发，有完整的访问记录提供审计能力。</p>
<h1 id="Vulnerability-Rewards-Program"><a href="#Vulnerability-Rewards-Program" class="headerlink" title="Vulnerability Rewards Program"></a>Vulnerability Rewards Program</h1><p>鼓励Hack，奖励发现漏洞的白帽子。简单对比了下，是所有国际性大厂里提供漏洞奖励最高的。已提供超过200万美刀的奖励。<br><a href="https://www.google.com/about/appsecurity/reward-program/" target="_blank" rel="external">https://www.google.com/about/appsecurity/reward-program/</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/google_reward_tshirt.png" alt="google_reward_tshirt.png" title="">
                </div>
                </figure></p>
<h1 id="第三方认证"><a href="#第三方认证" class="headerlink" title="第三方认证"></a>第三方认证</h1><p>安全不能是自说自话，必须要有客观公正独立的第三方审计来保证安全措施的有效。<br>安全工程师保证数据的安全，再加上律师的努力，让安全流程符合规则，获得第三方机构的认证。</p>
<h2 id="PCI-DSS"><a href="#PCI-DSS" class="headerlink" title="PCI DSS"></a>PCI DSS</h2><p>Payment Card Industry  Data Security Standard，对支付数据的传输、处理和保存进行了严格的规定。</p>
<h2 id="HIPAA"><a href="#HIPAA" class="headerlink" title="HIPAA"></a>HIPAA</h2><p>Health Insurance Portability and Accountability，个人健康信息的隐私保护标准。</p>
<h2 id="ISO-27001"><a href="#ISO-27001" class="headerlink" title="ISO 27001"></a>ISO 27001</h2><p>信息安全管理,是国际上具有代表性的信息安全管理体系标准，Google获取的是最新的2013版标准认证。<br><strong>以下是各个服务所对应的认证列表</strong><br> <figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/service-side-security-from-google/14457792698932.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="促进信息行业安全，Proejct-Zero"><a href="#促进信息行业安全，Proejct-Zero" class="headerlink" title="促进信息行业安全，Proejct Zero"></a>促进信息行业安全，Proejct Zero</h1><ul>
<li>类比国内的乌云平台</li>
<li>不光抓自己的Bug</li>
<li>发现openssl heartbleed</li>
<li>发现widnows 0day</li>
<li>90天的修复期<br><a href="https://en.wikipedia.org/wiki/Project_Zero_(Google" target="_blank" rel="external">https://en.wikipedia.org/wiki/Project_Zero_(Google</a>)<br><a href="https://googleonlinesecurity.blogspot.sg/2014/07/announcing-project-zero.html" target="_blank" rel="external">https://googleonlinesecurity.blogspot.sg/2014/07/announcing-project-zero.html</a></li>
</ul>
<h1 id="爆光第三方组织的数据访问要求"><a href="#爆光第三方组织的数据访问要求" class="headerlink" title="爆光第三方组织的数据访问要求"></a>爆光第三方组织的数据访问要求</h1><p>非技术，法律和政府层面。<br><a href="https://www.google.com/transparencyreport/userdatarequests/?hl=en" target="_blank" rel="external">https://www.google.com/transparencyreport/userdatarequests/?hl=en</a></p>
<h1 id="发布邮件传输加密报告"><a href="#发布邮件传输加密报告" class="headerlink" title="发布邮件传输加密报告"></a>发布邮件传输加密报告</h1><p><a href="https://www.google.com/transparencyreport/saferemail/?hl=en#region=142" target="_blank" rel="external">https://www.google.com/transparencyreport/saferemail/?hl=en#region=142</a><br>从技术层面，推出邮件这一网络基础应用的安全传输水平。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>提供安全的服务，不是成本，而是产品的核心竞争力。<br><strong>安全，至关重要。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;h2 id=&quot;网易&quot;&gt;&lt;a href=&quot;#网易&quot; class=&quot;headerlink&quot; title=&quot;网易&quot;&gt;&lt;/a&gt;网易&lt;/h2&gt;&lt;p&gt;邮箱过
    
    </summary>
    
    
      <category term="security" scheme="https://yangbo.tech/tags/security/"/>
    
      <category term="cloud" scheme="https://yangbo.tech/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>Android 应用开发模拟器的选用</title>
    <link href="https://yangbo.tech/2015/11/05/android-dev-emulator/"/>
    <id>https://yangbo.tech/2015/11/05/android-dev-emulator/</id>
    <published>2015-11-05T03:33:28.000Z</published>
    <updated>2015-11-05T04:49:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 应用开发过程中无论是调试还是测试都要用到 Android 系统，有模拟器（虚拟机）和真机两种选择。</p>
<h2 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h2><p>ABI（Applicaton Binary Interface），主要是 CPU 指令集和内存分页这两个最重要的硬件配置，现在已经运行在7个ABI：armeabi，armeabi-v7a (armeabi-v7a-hard)，arm64-v8a，x86，x86_64，mips 和 mips64。</p>
<h2 id="真机"><a href="#真机" class="headerlink" title="真机"></a>真机</h2><p>真机在购买时已经选定了硬件ABI，ROM 的更新取决于 ROM 提供商， 就算解决了科学上网问题，Play Service 是否能正常运行也是个问题（国内 ROM 不会主动去通过 CTS 测试）。但做为 Andorid 开发者，真机还是必不可少的装备，Google Nexus系是首选，不必是最新的机型（除非做最新硬件适配），旧的硬件配置上应用性能没问题的话，更新的硬件应用性能自然更好。</p>
<h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><h3 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h3><p>Android官方模拟器，基于 qemu，在 Android SDK 以 system image 展现。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-emulator/14466966330238.jpg" alt="" title="">
                </div>
                </figure><br><strong>特点：</strong></p>
<ul>
<li>更新快</li>
<li>有 Preview Channel</li>
<li>Googel APIs 原生支持 play service<br><strong>缺点：</strong><br>基于 qemu 的虚拟机，慢！<br><strong>Tips</strong><br>使用 x86 的 System Images，省去 arm虚拟机到 x86物理机的指令转换开销。<h3 id="Genymotion"><a href="#Genymotion" class="headerlink" title="Genymotion"></a>Genymotion</h3><a href="https://www.genymotion.com" target="_blank" rel="external">https://www.genymotion.com</a><br>基于 VirtualBox 的模拟器，专注于模拟器产品，还提供更多功能的商业支持。<br>安装后运行：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-emulator/14466970330574.jpg" alt="" title="">
                </div>
                </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-emulator/14466972444832.jpg" alt="" title="">
                </div>
                </figure>
</li>
</ul>
<p><strong> 特点： </strong></p>
<ul>
<li>基于不断更新的 VirtualBox，快! </li>
<li>更好用的模拟器控制（右边栏）。</li>
</ul>
<p><strong> 缺点：</strong></p>
<ul>
<li>原生不支持 play service</li>
<li>Android 版本支持慢<br><strong> 安装 play service</strong><br>下载 play service 相关 APK，注意选 x86，virtualbox 是 x86架构。<br><a href="http://opengapps.org/" target="_blank" rel="external">http://opengapps.org/</a><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/android-emulator/14466980422298.jpg" alt="" title="">
                </div>
                </figure>
把下载的 zip 直接拖到运行的 genymotion 模拟器中就行了。</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>真机/官方模拟器/Genymotion 配合使用，各取所长。</p>
<p>如果引入了第三方库，导致应用不能正常安装或运行，检查引入第三方库的 ABI 支持。例如国内很多 SDK 没有x86的支持，在开发时就只能使用 arm ABI。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Android 应用开发过程中无论是调试还是测试都要用到 Android 系统，有模拟器（虚拟机）和真机两种选择。&lt;/p&gt;
&lt;h2 id=&quot;ABI&quot;&gt;&lt;a href=&quot;#ABI&quot; class=&quot;headerlink&quot; title=&quot;ABI&quot;&gt;&lt;/a&gt;ABI&lt;/h2&gt;&lt;p
    
    </summary>
    
    
      <category term="Android" scheme="https://yangbo.tech/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发中处理 SVG 和 Material Design 相关的有小工具和链接</title>
    <link href="https://yangbo.tech/2015/10/31/useful-tools-and-links-for-svg-and-material-design/"/>
    <id>https://yangbo.tech/2015/10/31/useful-tools-and-links-for-svg-and-material-design/</id>
    <published>2015-10-31T02:39:21.000Z</published>
    <updated>2015-10-31T03:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h1><p><a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html" target="_blank" rel="external"><code>VectorDrawable</code></a> 和 <a href="http://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html" target="_blank" rel="external"><code>AnimatedVectorDrawable</code></a>向前兼容支持 API14+，官方只支持 API21+。<br><a href="https://github.com/wnafee/vector-compat" target="_blank" rel="external">https://github.com/wnafee/vector-compat</a></p>
<p>将原始的 SVG 文件转换为 Android 的 XML 资源<br><a href="https://github.com/inloop/svg2android" target="_blank" rel="external">https://github.com/inloop/svg2android</a></p>
<p>将 SVG 中的 Circle 和Ellipse 转换为 Path Ars<br><a href="http://complexdan.com/svg-circleellipse-to-path-converter/" target="_blank" rel="external">http://complexdan.com/svg-circleellipse-to-path-converter/</a></p>
<p>动态演示SVG 中的 Path Arcs<br><a href="http://users.ecs.soton.ac.uk/rfp07r/interactive-svg-examples/arc.html" target="_blank" rel="external">http://users.ecs.soton.ac.uk/rfp07r/interactive-svg-examples/arc.html</a></p>
<p>Trello 提供的 Gradle Plugin，可将 SVG 资源单独存放，方便组织和管理<br><a href="https://github.com/trello/victor" target="_blank" rel="external">https://github.com/trello/victor</a></p>
<h1 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h1><p>Material调色盘<br><a href="https://www.materialpalette.com/" target="_blank" rel="external">https://www.materialpalette.com/</a></p>
<p>Materisl Design 图标大全<br><a href="https://materialdesignicons.com/" target="_blank" rel="external">https://materialdesignicons.com/</a></p>
<p>Google 的 Material Design 示例，是一个小猜谜应用<br><a href="https://github.com/googlesamples/android-topeka" target="_blank" rel="external">https://github.com/googlesamples/android-topeka</a></p>
<p>另一个 Material Design 示例<br><a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">https://github.com/chrisbanes/cheesesquare</a></p>
<p>Material Design 秀场<br><a href="https://www.materialup.com/" target="_blank" rel="external">https://www.materialup.com/</a></p>
<p>更方便的使用 Material Deisign API<br><a href="https://github.com/DenisMondon/material-design-library" target="_blank" rel="external">https://github.com/DenisMondon/material-design-library</a></p>
<p>让 Material Design 兼容 API22之前的 Android 版本<br><a href="http://rey5137.com/material/" target="_blank" rel="external">http://rey5137.com/material/</a></p>
<h1 id="Blogs"><a href="#Blogs" class="headerlink" title="Blogs"></a>Blogs</h1><p><a href="http://www.androiddesignpatterns.com/" target="_blank" rel="external">http://www.androiddesignpatterns.com/</a></p>
<p><a href="https://halfthought.wordpress.com/" target="_blank" rel="external">https://halfthought.wordpress.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SVG&quot;&gt;&lt;a href=&quot;#SVG&quot; class=&quot;headerlink&quot; title=&quot;SVG&quot;&gt;&lt;/a&gt;SVG&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/graphics/d
    
    </summary>
    
      <category term="Android" scheme="https://yangbo.tech/categories/Android/"/>
    
    
      <category term="Android" scheme="https://yangbo.tech/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>关于 Brillo 和 Weave， 开发者应该知道的</title>
    <link href="https://yangbo.tech/2015/10/30/all-about-brillo-and-weave/"/>
    <id>https://yangbo.tech/2015/10/30/all-about-brillo-and-weave/</id>
    <published>2015-10-30T11:17:07.000Z</published>
    <updated>2015-10-31T02:48:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/media/14462116526573.jpg" alt="" title="">
                </div>
                </figure>
<p>在 Google IO 2015中宣布的 Android for IoT – Brillo和配套的协议 Weave 终于要揭开神秘的面纱了。<br>Google 在2014年1月以32亿美元收购了物联网公司 Nest Lab，其实最主要还是看中了 Nest 在物联网操作系统和低功耗传输协议方面的杰出成就，经过快2年的磨合和消化，推出了 Brillo 和 Weave。</p>
<h2 id="Brillo"><a href="#Brillo" class="headerlink" title="Brillo"></a>Brillo</h2><p>万物互联网上的 Android（Android for IoT），从名称上就可以看出与 Android、Android Wear、Android Auto、Android TV不同，因为其可以运行的硬件最低配置公为32M内存和128M存储，是一个非常精剪的 Androd 运行时环境，不会有 ART，可以看成只运行Linux 内核和部分 Android 本地库的Android系统。</p>
<h2 id="Weave"><a href="#Weave" class="headerlink" title="Weave"></a>Weave</h2><p>Weave 的前身是 <a href="http://threadgroup.org/" target="_blank" rel="external">Thread</a>，是一种基于 IP-V6用来解决智能家居应用场景中的网络传输，跟Thread 相对应的是 BLE（Bluetooth Low Energy）和 Zigbee，由 Nest 发起，成员有 Samsung, ARM Holdings, Freescale, Silicon Labs, Big Ass Fans， Yale。。。<br>熟悉 Android 应用开发的同学都知道 Android 中进行 BLE 通讯是非常的方便，所以对于 Weave，会提供更加方便的 API 供开发者使用。</p>
<p>PS：在 IO2015的 Nest 展位上和Nest 一位资深工程师聊天，提到为什么有了 BLE和 Zigbee，Nest还要开发一种新的通讯协议，他提到说由于 Nest 对于物联网的投入比较早，当时根本找不到一个合适的协议来满足Nest 的网络传输需要，那就自己动手，丰衣足食了，并且基于 IP-V6也是与其它协议有着明显的优势，对传输速率和功耗进行了最优化的平衡设计。</p>
<h1 id="可以用来开发什么"><a href="#可以用来开发什么" class="headerlink" title="可以用来开发什么"></a>可以用来开发什么</h1><p>有嵌入式，物联网，智能家居，Android 应用领域开发者，都可以利用 Brillo和 Weave 这样的开发平台和开放协议来进行富有创新性的开发，让用户有更多的选择，真正做到 Android is Everywhere。</p>
<p>以前用户在选择物联网和智能家居时，所有数据都会依赖于某一个产品提供商，形成数据孤岛，通过Brillo，解藕了特定产品和系统，硬件和软件都可以肆意的各自创新，像 Android 手机百花齐放一样，Brillo 迅速的进入家庭应用场景。</p>
<p>由于 Android 的开放性，掌握 Android 开发技能的人也越来越多，配合 NDK 的开发来切入这些风口领域，获得更广阔的职业发展前景。</p>
<p>由于Brillo极低的运行硬件要求，以及 Android 内核丰富的硬件架构支持，从硬件的发展上会有更大的飞跃和更多的产品，从32M内存配置向上不断延伸。</p>
<h1 id="通过-Weave-通信"><a href="#通过-Weave-通信" class="headerlink" title="通过 Weave 通信"></a>通过 Weave 通信</h1><p>Brillo 原生支持 Weave，Brillo 推出了最新的 Android 肯定会集成 Weave 的支持，并且还会以某种容易发布安装的形式支持 Android 之前的版本。<br>OnHub 路由器原生支持 Weave，通信可以不通过 Android 设备，利用路由器进行直接的云端交互。<br>由于 Weave 基于 IP-V6，理论上来讲，iOS 和 WP 都有支持的可能性。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/media/14462114396315.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="需要的开发准备"><a href="#需要的开发准备" class="headerlink" title="需要的开发准备"></a>需要的开发准备</h1><h2 id="申请开发者资格"><a href="#申请开发者资格" class="headerlink" title="申请开发者资格"></a>申请开发者资格</h2><p><a href="https://developers.google.com/brillo/?hl=en" target="_blank" rel="external">https://developers.google.com/brillo/?hl=en</a><br>先申请，可以在第一时间收到开发相关的更新。</p>
<h2 id="学习-Android-NDK"><a href="#学习-Android-NDK" class="headerlink" title="学习 Android NDK"></a>学习 Android NDK</h2><p><a href="http://developer.android.com/tools/sdk/ndk/index.html" target="_blank" rel="external">http://developer.android.com/tools/sdk/ndk/index.html</a><br>Brillo 应该只允许运行 NDK 生成的 so 模块，对于 Android 应用开发者来讲需要学习或温习 NDK 相关的开发，而对于从事嵌入式开发的同学需要了解下 Android 的 Java 与 NDk 是如何协同工作的，NDK 是C\C++的开发环境，可能与你之前的开发环境会有一些支持库不同，但相信可以很快上手。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>Android Studio1.4已经集成 NDK 的下载，不用再单独下载并手动配置。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/media/14462095693163.jpg" alt="" title="">
                </div>
                </figure></p>
<p>在独立的 SDK 管理界面还没有 NDK，可以看出 Android Studio 作为官方开发工具进一步集成的趋势，类似于 XCode，全部内部管理 SDK。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>官方 Blog 公告<br><a href="http://googledevelopers.blogspot.sg/2015/10/building-brillo-iant-devices-with-weave_27.html" target="_blank" rel="external">http://googledevelopers.blogspot.sg/2015/10/building-brillo-iant-devices-with-weave_27.html</a><br>公告中文版：<br><a href="http://chinagdg.org/2015/10/building-brillo-iant-devices-with-weave/" target="_blank" rel="external">http://chinagdg.org/2015/10/building-brillo-iant-devices-with-weave/</a></p>
<p>视频简介墙外无广告版：<br><a href="https://youtu.be/2rPkbyyviGI" target="_blank" rel="external">https://youtu.be/2rPkbyyviGI</a><br><a href="https://youtu.be/uIIZD4KuIJM" target="_blank" rel="external">https://youtu.be/uIIZD4KuIJM</a><br>视频简介墙内插入广告版：<br><a href="http://v.youku.com/v_show/id_XMTM3MTMzNjM0OA==.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XMTM3MTMzNjM0OA==.html</a><br><a href="http://v.youku.com/v_show/id_XMTM3MTQyODI1Mg==.html" target="_blank" rel="external">http://v.youku.com/v_show/id_XMTM3MTQyODI1Mg==.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;

    
    </summary>
    
      <category term="Android" scheme="https://yangbo.tech/categories/Android/"/>
    
    
      <category term="Android" scheme="https://yangbo.tech/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>国内 Android SDK 更新不用科学上网了</title>
    <link href="https://yangbo.tech/2015/10/29/android-sdk-ok/"/>
    <id>https://yangbo.tech/2015/10/29/android-sdk-ok/</id>
    <published>2015-10-29T10:45:51.000Z</published>
    <updated>2015-10-29T11:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>做 Android 开发的同学们，最近更新 Android SDK 发现都是不需科学上网，下载速度基本上可以利用全部带宽，刚开始以为是 GFW 抽风了，但一直稳定的更新，刚才 dig 了一下，所有下载流量已经解析到了北京机房。</p>
<p>可以不用再配置代理，也不会从 SDK 和 Android Studio 引入 AndroidGhost 了。</p>
<h1 id="网络-dig"><a href="#网络-dig" class="headerlink" title="网络 dig"></a>网络 dig</h1><p>运营商：上海长城宽带<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> bin  dig dl.google.com</div><div class="line"></div><div class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; dl.google.com</div><div class="line">;; global options: +cmd</div><div class="line">;; Got answer:</div><div class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 44633</div><div class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 12, AUTHORITY: 0, ADDITIONAL: 0</div><div class="line"></div><div class="line">;; QUESTION SECTION:</div><div class="line">;dl.google.com.			IN	A</div><div class="line"></div><div class="line">;; ANSWER SECTION:</div><div class="line">dl.google.com.		22	IN	CNAME	dl.l.google.com.</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.131</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.128</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.136</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.137</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.142</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.135</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.133</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.129</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.130</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.132</div><div class="line">dl.l.google.com.	22	IN	A	203.208.48.134</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/media/14461158235259.jpg" alt="" title="">
                </div>
                </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/media/14461163922960.jpg" alt="" title="">
                </div>
                </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/media/14461164370533.jpg" alt="" title="">
                </div>
                </figure>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>由于国内异常复杂的网络情况，导致 dl.google.com 的下载速度会有很大的差别，但终归是不需要科学上网来更新 SDK 了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做 Android 开发的同学们，最近更新 Android SDK 发现都是不需科学上网，下载速度基本上可以利用全部带宽，刚开始以为是 GFW 抽风了，但一直稳定的更新，刚才 dig 了一下，所有下载流量已经解析到了北京机房。&lt;/p&gt;
&lt;p&gt;可以不用再配置代理，也不会从 S
    
    </summary>
    
      <category term="Android" scheme="https://yangbo.tech/categories/Android/"/>
    
    
      <category term="Android" scheme="https://yangbo.tech/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>15分钟，使用BigQuery和Google Sheets对Hacker News历史数据进行在线分析</title>
    <link href="https://yangbo.tech/2015/10/25/using-bigquery-with-gas-on-hacker-news-dateset/"/>
    <id>https://yangbo.tech/2015/10/25/using-bigquery-with-gas-on-hacker-news-dateset/</id>
    <published>2015-10-25T07:53:07.000Z</published>
    <updated>2016-12-31T02:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://twitter.com/felipehoffa" target="_blank" rel="external">Felipe Hoffa</a>使用 <a href="https://github.com/HackerNews/API" target="_blank" rel="external">Hacker News API</a>将Hacker News的数据导出到了Big Query，<br><a href="https://bigquery.cloud.google.com/table/fh-bigquery:hackernews.comments" target="_blank" rel="external">https://bigquery.cloud.google.com/table/fh-bigquery:hackernews.comments</a></p>
<p>这是一个共享的表，BigQuery每天有1000次的免费查询额度，再利用Google Sheets来保存查询结果并进行数据可视化，实现一个低成本的在线大数据分析流程。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>不需要安装任何软件，只要有一个Google Account。打开以下两个页面：<br><a href="https://bigquery.cloud.google.com/table/fh-bigquery:hackernews.comments" target="_blank" rel="external">https://bigquery.cloud.google.com/table/fh-bigquery:hackernews.comments</a><br><a href="http://g.co/sheets" target="_blank" rel="external">http://g.co/sheets</a><br>Google Sheets不仅提供数据保存和可视化，还集成了Googel Apps Script，天然支持BigQuery查询。<br>打开<a href="https://bigquery.cloud.google.com/table/fh-bigquery:hackernews.comments" target="_blank" rel="external">https://bigquery.cloud.google.com/table/fh-bigquery:hackernews.comments</a><br>进行一次简单的测试查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> a.month <span class="keyword">month</span>, stories, comments, comment_authors, story_authors</div><div class="line"><span class="keyword">FROM</span> (</div><div class="line">  <span class="keyword">SELECT</span> STRFTIME_UTC_USEC(time_ts, <span class="string">'%Y-%m'</span>) <span class="keyword">month</span>, <span class="keyword">COUNT</span>(*) stories, EXACT_COUNT_DISTINCT(author) story_authors</div><div class="line">  <span class="keyword">FROM</span> [fh-bigquery:hackernews.stories]</div><div class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">1</span></div><div class="line">) a</div><div class="line"><span class="keyword">JOIN</span> (</div><div class="line">  <span class="keyword">SELECT</span> STRFTIME_UTC_USEC(time_ts, <span class="string">'%Y-%m'</span>) <span class="keyword">month</span>, <span class="keyword">COUNT</span>(*) comments, EXACT_COUNT_DISTINCT(author) comment_authors</div><div class="line">  <span class="keyword">FROM</span> [fh-bigquery:hackernews.comments]</div><div class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">1</span></div><div class="line">) b</div><div class="line"><span class="keyword">ON</span> a.month=b.month</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457616467137.jpg" alt="" title="">
                </div>
                </figure>
<p>表中的记录数和表大小<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457619545454.jpg" alt="" title="">
                </div>
                </figure></p>
<h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="新建一个Google-Sheets"><a href="#新建一个Google-Sheets" class="headerlink" title="新建一个Google Sheets"></a>新建一个Google Sheets</h2><p>命名为<em>Play Hacker News With BigQuery</em><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457603691205.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="开启BigQuery支持"><a href="#开启BigQuery支持" class="headerlink" title="开启BigQuery支持"></a>开启BigQuery支持</h2><p>点击<code>Tools -&gt; Script Editor...</code>，打开Google Apps Script编程界面。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457604686047.jpg" alt="" title="">
                </div>
                </figure><br>点击<code>Resouces -&gt; Advanced Google Services...</code>，会先弹出保存保存项目对话框，输入项目名称，点击<code>OK</code>。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457605774093.jpg" alt="" title="">
                </div>
                </figure><br>启用BigQuery支持。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457607195395.jpg" alt="" title="">
                </div>
                </figure><br>点击<code>Google Developers Console</code>链接，在控制台上启用BigQuery。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457607886658.jpg" alt="" title="">
                </div>
                </figure><br>启用API，并记录下URL中的Project ID（纯数字，图中被涂部分），获取数据时会用到。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457609019011.jpg" alt="" title="">
                </div>
                </figure></p>
<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>使用以下Googel Apps Script代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runQuery</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Replace this value with your Google Developer project number (It is really a number.</span></div><div class="line">  <span class="comment">// Don't confuse it with an alphanumeric project id)</span></div><div class="line">  <span class="keyword">var</span> projectNumber = <span class="string">'替换为前边提到的ProjectID'</span>;</div><div class="line">  <span class="keyword">if</span> (projectNumber.length &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">var</span> errMsg = <span class="string">"You forgot to set a project number - So no BQ for you!"</span>;</div><div class="line">      Logger.log(errMsg);</div><div class="line">      Browser.msgBox(errMsg);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> sheet = SpreadsheetApp.getActiveSheet();</div><div class="line">  <span class="keyword">var</span> sql = <span class="string">'SELECT a.month month, stories, comments, comment_authors, story_authors FROM (SELECT STRFTIME_UTC_USEC(time_ts, \'%Y-%m\') month, '</span>+</div><div class="line">    <span class="string">'COUNT(*) stories, EXACT_COUNT_DISTINCT(author) story_authors FROM [fh-bigquery:hackernews.stories] GROUP BY 1 ) a JOIN '</span>+</div><div class="line">      <span class="string">'(SELECT STRFTIME_UTC_USEC(time_ts, \'%Y-%m\') month, COUNT(*) comments, EXACT_COUNT_DISTINCT(author) comment_authors '</span>+</div><div class="line">        <span class="string">'FROM [fh-bigquery:hackernews.comments] GROUP BY 1 ) b ON a.month=b.month ORDER BY 1;'</span>;</div><div class="line">  <span class="keyword">var</span> queryResults;</div><div class="line"></div><div class="line">  <span class="comment">// Inserts a Query Job</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">var</span> queryRequest = BigQuery.newQueryRequest();</div><div class="line">    queryRequest.setQuery(sql).setTimeoutMs(<span class="number">100000</span>);</div><div class="line">    queryResults = BigQuery.Jobs.query(queryRequest, projectNumber);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (err) &#123;</div><div class="line">    Logger.log(err);</div><div class="line">    Browser.msgBox(err);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Check on status of the Query Job</span></div><div class="line">  <span class="keyword">while</span> (queryResults.getJobComplete() == <span class="literal">false</span>) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      queryResults = BigQuery.Jobs.getQueryResults(projectNumber, queryJob.getJobReference().getJobId());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (err) &#123;</div><div class="line">      Logger.log(err);</div><div class="line">      Browser.msgBox(err);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Update the amount of results</span></div><div class="line">  <span class="keyword">var</span> resultCount = queryResults.getTotalRows();</div><div class="line">  <span class="keyword">var</span> resultSchema = queryResults.getSchema();</div><div class="line"></div><div class="line">  <span class="comment">//get cloumn header</span></div><div class="line">  <span class="comment">// Append the headers.</span></div><div class="line">    <span class="keyword">var</span> headers = queryResults.schema.fields.map(<span class="function"><span class="keyword">function</span>(<span class="params">field</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> field.name;</div><div class="line">    &#125;);</div><div class="line">    sheet.appendRow(headers);</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">var</span> resultValues = <span class="keyword">new</span> <span class="built_in">Array</span>(resultCount+<span class="number">1</span>);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> tableRows = queryResults.getRows();</div><div class="line"></div><div class="line">  <span class="comment">// Iterate through query results</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tableRows.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> cols = tableRows[i].getF();</div><div class="line">    resultValues[i] = <span class="keyword">new</span> <span class="built_in">Array</span>(cols.length);</div><div class="line">    <span class="comment">// For each column, add values to the result array</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cols.length; j++) &#123;</div><div class="line">      resultValues[i][j] = cols[j].getV();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Update the Spreadsheet with data from the resultValues array, starting from cell A1</span></div><div class="line">  sheet.getRange(<span class="number">2</span>, <span class="number">1</span>, resultCount, tableRows[<span class="number">0</span>].getF().length).setValues(resultValues);</div><div class="line"></div><div class="line">  Browser.msgBox(<span class="string">"Yo yo! We are done with updating the results"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Insert our customize menu item</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onOpen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sheet = SpreadsheetApp.getActiveSpreadsheet();</div><div class="line">  <span class="keyword">var</span> menuEntries = [ &#123;<span class="attr">name</span>: <span class="string">'Run Query'</span>, <span class="attr">functionName</span>: <span class="string">'runQuery'</span>&#125; ];</div><div class="line">  sheet.addMenu(<span class="string">'BigQuery Example'</span>, menuEntries);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457611479369.jpg" alt="" title="">
                </div>
                </figure>
<p>保存，在方法下拉框中选择runQuery，点击运行（小三角图标）。</p>
<p>第一次运行需要一次性授权<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457612298813.jpg" alt="" title="">
                </div>
                </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457612418204.jpg" alt="" title="">
                </div>
                </figure></p>
<p>授权完成，再点击一次运行。<br>运行完成，切换到新的Google Sheet页面，查看结果。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457613378093.jpg" alt="" title="">
                </div>
                </figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457613514484.jpg" alt="" title="">
                </div>
                </figure>
<h1 id="使用图表"><a href="#使用图表" class="headerlink" title="使用图表"></a>使用图表</h1><p>利用Google Sheets提供的强大报表功能，让我们查询出来的数据变得更加具有表现力。<br>直接点击右下角的<code>Explorer</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457614778875.jpg" alt="" title="">
                </div>
                </figure></p>
<p>浏览自动生成的报表，选择喜欢的插入入到文档中。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457615312728.jpg" alt="" title="">
                </div>
                </figure><br>对报表再进行进一步的定制<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457615848032.jpg" alt="" title="">
                </div>
                </figure><br>最终的效果：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/big-query-with-hacker-news/14457617653903.jpg" alt="" title="">
                </div>
                </figure></p>
<p>Play Hacker News With BigQuery的链接，可以自由打开，先看下效果。<br><a href="https://docs.google.com/spreadsheets/d/1iMedOlxn_CBrvYERvap1kIz2l8mT2cqFag11OrmnIX4/edit?usp=sharing" target="_blank" rel="external">https://docs.google.com/spreadsheets/d/1iMedOlxn_CBrvYERvap1kIz2l8mT2cqFag11OrmnIX4/edit?usp=sharing</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可以看出，对于大概4G的数据量进行BigQuery查询分析，是非常的快，并且利用Google Sheets进行结果展示，让大数据在云端飞起来。<br>希望看到更多利用大数据分析的应用来丰富我们的生活。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>BigQuery的免费使用额度为：10000个查询每天，1000G存储每月。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://twitter.com/felipehoffa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Felipe Hoffa&lt;/a&gt;使用 &lt;a href=&quot;https://github.com/HackerNews/API&quot; ta
    
    </summary>
    
    
      <category term="cloud" scheme="https://yangbo.tech/tags/cloud/"/>
    
      <category term="big data" scheme="https://yangbo.tech/tags/big-data/"/>
    
  </entry>
  
  <entry>
    <title>利用Google Maps API预测未来</title>
    <link href="https://yangbo.tech/2015/10/24/predict-future-travel-time/"/>
    <id>https://yangbo.tech/2015/10/24/predict-future-travel-time/</id>
    <published>2015-10-24T08:43:47.000Z</published>
    <updated>2015-11-13T08:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>大数据，云计算。。。这些词汇越来越多的出现在开发者和普通人的语境里，对于这些技术，不同的角度可以有不同的解读，但目的应该是统一明确的：存储分析利用过去的数据，当然是越多越好，也就是大数据，以最快的计算速度和最低的计算成本来组织、处理、分析这些数据（云计算），为解决当下的问题提供依据，如果还能够预测未来，让资源配置更优就更好了。</p>
<h1 id="路线规划"><a href="#路线规划" class="headerlink" title="路线规划"></a>路线规划</h1><p>在现实世界中，人、财、物时时刻刻都在流动，为了达到最优路径，路线规划就成了最本质最普适的计算需求。有需求就有相应的产品，以下是Google、百度、高德这三家地图市场占有率前三的路线规划功能：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/google_nav_plan.png" alt="google_nav_plan.png" title="">
                </div>
                </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/baidu_nav_plan.png" alt="baidu_nav_plan.png" title="">
                </div>
                </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/amap_nav_plan.png" alt="amap_nav_plan.png" title="">
                </div>
                </figure><br><em>对比</em><br>相同点，三个地图中都有相应的路线规划功能，指定出发地点和到达地点，提供多条路径供选择。<br>不同点，在Google Maps中，对于路线规划多了指定出发时间的功能，在截图中箭头所指位置。使用Google Maps，指定未来时间，就可以回答：</p>
<ul>
<li>几点出发可以在下午3点前到达机场？</li>
<li>我们的服务人员几点钟可以到达客户现场？</li>
<li>下周二可以安排走访四个场地吗？<br>。。。。。。</li>
</ul>
<h1 id="预测未来"><a href="#预测未来" class="headerlink" title="预测未来"></a>预测未来</h1><p>指定出发时间，看似简单的一项功能，后边却包含了调用分析整个Google Maps累积的海量历史交通数据，利用Google的计算能力，在不影响API返回速度的提前下，对未来进行预测。</p>
<h1 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h1><p>Google Maps API是Google Maps的技术支持，预测未来的这个功能，在API中也可以调用来让我们的应用，不论是LBS还是O2O，都变得更加智能。<br>可以在Direction和Matrix Distance中指定departure_time:<br><a href="https://developers.google.com/maps/documentation/directions/intro" target="_blank" rel="external">https://developers.google.com/maps/documentation/directions/intro</a><br><a href="https://developers.google.com/maps/documentation/distance-matrix/intro" target="_blank" rel="external">https://developers.google.com/maps/documentation/distance-matrix/intro</a><br>输入参数：departure_time,从1970/01/01,00:00:00开始的整数，单位是s。</p>
<h1 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h1><p>还有一个配置预测的参数，没有在API文档中列出来，那就是traffic_model，用来手工影响预测结果。<br>best_guess，默认值。<br>pessimistic<br>optimistic<br>一图胜千言：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/traffic_mode_parameters.png" alt="traffic_mode_parameters" title="">
                </div>
                </figure></p>
<h1 id="典型用途"><a href="#典型用途" class="headerlink" title="典型用途"></a>典型用途</h1><h2 id="企业级应用"><a href="#企业级应用" class="headerlink" title="企业级应用"></a>企业级应用</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/ptt_in_ent.png" alt="ptt_in_ent" title="">
                </div>
                </figure>
<h2 id="消费级应用"><a href="#消费级应用" class="headerlink" title="消费级应用"></a>消费级应用</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/ptt_in_consumer.png" alt="ptt_in_comsumer" title="">
                </div>
                </figure>
<h1 id="使用授权"><a href="#使用授权" class="headerlink" title="使用授权"></a>使用授权</h1><p>由于这个功能要消耗大量的计算资源，现在只在<a href="https://developers.google.com/maps/documentation/business/" target="_blank" rel="external">Google Maps API for Work</a>中指定departure_time才会有效。</p>
<h1 id="update"><a href="#update" class="headerlink" title="update"></a>update</h1><p>20151111<br>两个在线示例</p>
<h2 id="http-mapsptt-appspot-com-getdirections"><a href="#http-mapsptt-appspot-com-getdirections" class="headerlink" title="http://mapsptt.appspot.com/getdirections"></a><a href="http://mapsptt.appspot.com/getdirections" target="_blank" rel="external">http://mapsptt.appspot.com/getdirections</a></h2><p><a href="http://mapsptt.appspot.com/getdirections?origin=SFO,%20San%20Francisco,%20CA,%20United%20States&amp;destination=Googleplex,%20Amphitheatre%20Parkway,%20Mountain%20View,%20CA,%20United%20States&amp;client=gme-addictive&amp;departure_time=1457254000" target="_blank" rel="external">http://mapsptt.appspot.com/getdirections?origin=SFO,%20San%20Francisco,%20CA,%20United%20States&amp;destination=Googleplex,%20Amphitheatre%20Parkway,%20Mountain%20View,%20CA,%20United%20States&amp;client=gme-addictive&amp;departure_time=1457254000</a></p>
<p><a href="http://mapsptt.appspot.com/getdirections?origin=SFO,%20San%20Francisco,%20CA,%20United%20States&amp;destination=Googleplex,%20Amphitheatre%20Parkway,%20Mountain%20View,%20CA,%20United%20States&amp;client=gme-addictive&amp;departure_time=1467254000" target="_blank" rel="external">http://mapsptt.appspot.com/getdirections?origin=SFO,%20San%20Francisco,%20CA,%20United%20States&amp;destination=Googleplex,%20Amphitheatre%20Parkway,%20Mountain%20View,%20CA,%20United%20States&amp;client=gme-addictive&amp;departure_time=1467254000</a></p>
<h2 id="http-mapsptt-appspot-com-getdistance"><a href="#http-mapsptt-appspot-com-getdistance" class="headerlink" title="http://mapsptt.appspot.com/getdistance"></a><a href="http://mapsptt.appspot.com/getdistance" target="_blank" rel="external">http://mapsptt.appspot.com/getdistance</a></h2><p><a href="http://mapsptt.appspot.com/getdistance?origin=SFO,%20San%20Francisco,%20CA,%20United%20States&amp;destination=Googleplex,%20Amphitheatre%20Parkway,%20Mountain%20View,%20CA,%20United%20States&amp;client=gme-addictive&amp;departure_time=1457254000" target="_blank" rel="external">http://mapsptt.appspot.com/getdistance?origin=SFO,%20San%20Francisco,%20CA,%20United%20States&amp;destination=Googleplex,%20Amphitheatre%20Parkway,%20Mountain%20View,%20CA,%20United%20States&amp;client=gme-addictive&amp;departure_time=1457254000</a></p>
<p><a href="http://mapsptt.appspot.com/getdistance?origin=SFO,%20San%20Francisco,%20CA,%20United%20States&amp;destination=Googleplex,%20Amphitheatre%20Parkway,%20Mountain%20View,%20CA,%20United%20States&amp;client=gme-addictive&amp;departure_time=1467254000" target="_blank" rel="external">http://mapsptt.appspot.com/getdistance?origin=SFO,%20San%20Francisco,%20CA,%20United%20States&amp;destination=Googleplex,%20Amphitheatre%20Parkway,%20Mountain%20View,%20CA,%20United%20States&amp;client=gme-addictive&amp;departure_time=1467254000</a></p>
<p>20151113<br>另外两个示例</p>
<h2 id="https-commutetraffic-appspot-com-ptt-directions-html"><a href="#https-commutetraffic-appspot-com-ptt-directions-html" class="headerlink" title="https://commutetraffic.appspot.com/ptt-directions.html"></a><a href="https://commutetraffic.appspot.com/ptt-directions.html" target="_blank" rel="external">https://commutetraffic.appspot.com/ptt-directions.html</a></h2><h3 id="声明-direction-service"><a href="#声明-direction-service" class="headerlink" title="声明 direction service"></a>声明 direction service</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Declare the Directions Service</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> directionsService = <span class="keyword">new</span> google.maps.DirectionsService();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line">* Use the Places Autocomplete Place IDs for the origin and</div><div class="line"></div><div class="line">* destination to reduce chances of errors.</div><div class="line"></div><div class="line">* The departure time is in milliseconds and MUST be in the future.</div><div class="line"></div><div class="line">* Travel mode is Driving.</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> request = &#123;</div><div class="line"></div><div class="line">                <span class="attr">origin</span>: &#123;</div><div class="line"></div><div class="line">                    <span class="attr">placeId</span>: <span class="string">"ChIJyYfhZ79ZwokRMtXcL6CYxkA"</span> &#125;</div><div class="line"></div><div class="line">                &#125;,</div><div class="line"></div><div class="line">                <span class="attr">destination</span>: &#123;</div><div class="line"></div><div class="line">                    <span class="attr">placeId</span>: <span class="string">"ChIJvwJZrWH4wokRNBcFMQ0ohIE"</span></div><div class="line"></div><div class="line">                &#125;,</div><div class="line"></div><div class="line">                <span class="attr">travelMode</span>: google.maps.TravelMode.DRIVING,</div><div class="line"></div><div class="line">                <span class="attr">drivingOptions</span>: &#123;</div><div class="line"></div><div class="line">                    <span class="attr">departureTime</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1447621200000</span>),</div><div class="line"></div><div class="line">                    <span class="attr">trafficModel</span>: google.maps.TrafficModel.BEST_GUESS</div><div class="line"></div><div class="line">                &#125;</div></pre></td></tr></table></figure>
<h3 id="发送请求处理回调"><a href="#发送请求处理回调" class="headerlink" title="发送请求处理回调"></a>发送请求处理回调</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">directionsService.route(request, <span class="function"><span class="keyword">function</span>(<span class="params">result, status</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Check to see if the Service responded as expected</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (status == google.maps.DirectionsStatus.OK) &#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> routesLegs = result.routes[<span class="number">0</span>].legs[<span class="number">0</span>];</div><div class="line"></div><div class="line">  <span class="keyword">var</span> durationText = routesLegs.duration.text;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> durationInTrafficText = routesLegs.duration_in_traffic.text;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> duration = routesLegs.duration.value;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> durationInTraffic = routesLegs.duration_in_traffic.value;</div><div class="line"></div><div class="line">    <span class="comment">// Create a "Traffic Factor" score between typical and predicted travel times</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> trafficFactor = (durationInTraffic / duration);</div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Alert why the Directions Service Request failed.</span></div><div class="line"></div><div class="line">    alert(<span class="string">'Directions request failed due to '</span> + status);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="返回结果中的-leg-数据"><a href="#返回结果中的-leg-数据" class="headerlink" title="返回结果中的 leg 数据"></a>返回结果中的 leg 数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="string">"legs"</span>: [</div><div class="line"></div><div class="line">        &#123;</div><div class="line"></div><div class="line">          <span class="string">"duration"</span>: &#123;</div><div class="line"></div><div class="line">            <span class="string">"text"</span>: <span class="string">"25 mins"</span>,</div><div class="line"></div><div class="line">            <span class="string">"value"</span>: <span class="number">1471</span></div><div class="line"></div><div class="line">          &#125;,</div><div class="line"></div><div class="line">          <span class="string">"duration_in_traffic"</span>: &#123;</div><div class="line"></div><div class="line">            <span class="string">"text"</span>: <span class="string">"28 mins"</span>,</div><div class="line"></div><div class="line">            <span class="string">"value"</span>: <span class="number">1687</span></div><div class="line"></div><div class="line">          &#125;</div><div class="line">      ...</div></pre></td></tr></table></figure>
<h2 id="https-commutetraffic-appspot-com-ptt-distanceMatrix-html"><a href="#https-commutetraffic-appspot-com-ptt-distanceMatrix-html" class="headerlink" title="https://commutetraffic.appspot.com/ptt-distanceMatrix.html"></a><a href="https://commutetraffic.appspot.com/ptt-distanceMatrix.html" target="_blank" rel="external">https://commutetraffic.appspot.com/ptt-distanceMatrix.html</a></h2><p>和上个示例一样，使用 Distance Matrix API</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p> 关于如何实现预测：<br> <a href="http://onlinepubs.trb.org/Onlinepubs/IDEA/FinalReports/Reliability/FINALREPORTL15A%20.pdf" target="_blank" rel="external">http://onlinepubs.trb.org/Onlinepubs/IDEA/FinalReports/Reliability/FINALREPORTL15A%20.pdf</a><br> <a href="http://people.orie.cornell.edu/woodard/WoodNogiKoch15.pdf" target="_blank" rel="external">http://people.orie.cornell.edu/woodard/WoodNogiKoch15.pdf</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;大数据，云计算。。。这些词汇越来越多的出现在开发者和普通人的语境里，对于这些技术，不同的角度可以有不同的解读，但目的应该是统一明确的：存储分
    
    </summary>
    
      <category term="google maps api" scheme="https://yangbo.tech/categories/google-maps-api/"/>
    
    
      <category term="google maps api" scheme="https://yangbo.tech/tags/google-maps-api/"/>
    
  </entry>
  
  <entry>
    <title>找回Mac OSX El Captian默认隐藏的Dashboard</title>
    <link href="https://yangbo.tech/2015/10/20/re-enable-osx-el-captian-dashboard/"/>
    <id>https://yangbo.tech/2015/10/20/re-enable-osx-el-captian-dashboard/</id>
    <published>2015-10-20T12:43:47.000Z</published>
    <updated>2015-10-20T12:53:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>升级到最新的10.11，出现了几个不爽的地方。</p>
<ul>
<li><p>TotalTermial停止更新，不支持10.11。<br>没关系，换用iTerm 2。</p>
</li>
<li><p>XtraFinder不支持10.11。<br>找到了Snap，商店下载。<a href="https://itunes.apple.com/au/app/snap/id418073146?mt=12" target="_blank" rel="external">App Store</a><br>热键唤起Finder，并且可直接不用再点击Dock上的图标进行应用切换，直接使用快捷键<code>Command+1</code>,<code>Command+2</code>。。。，够犀利。比之前提高了效率。</p>
</li>
<li><p>Dashboard被隐藏了<br>发现桌面换到最左边没有Dashboard了，不能接受这个Change，也没有什么说明。<br>万能的Google，可以在Mission中手动启用。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/enable_dashboard.png" alt="mission" title="">
                </div>
                </figure>
<p>回来了！</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/osx_dashboard.png" alt="dashboard" title="">
                </div>
                </figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级到最新的10.11，出现了几个不爽的地方。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TotalTermial停止更新，不支持10.11。&lt;br&gt;没关系，换用iTerm 2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;XtraFinder不支持10.11。&lt;br&gt;找到了Snap，商店下载
    
    </summary>
    
      <category term="osx" scheme="https://yangbo.tech/categories/osx/"/>
    
    
      <category term="osx" scheme="https://yangbo.tech/tags/osx/"/>
    
  </entry>
  
  <entry>
    <title>在Android Studio中发布Library到jCenter公共仓库</title>
    <link href="https://yangbo.tech/2015/10/19/distribute-android-library-to-jcetner/"/>
    <id>https://yangbo.tech/2015/10/19/distribute-android-library-to-jcetner/</id>
    <published>2015-10-19T14:03:01.000Z</published>
    <updated>2015-10-19T14:03:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h1><p>在<a href="http://alphayang.github.io/2015/10/17/all-about-aar/" target="_blank" rel="external">Android开发，关于aar你应该知道的</a>一文中掌握了如何引用本地的aar，更多情况下我们是直接从网络上获取公开的第三方库来进行开发，而这个网络位置就是<a href="https://bintray.com/bintray/jcenter" target="_blank" rel="external">jCenter</a>，在gradle中使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>jCenter是Bintray提供的公开下载服务，使用自身开发的artifactory开源应用搭建，后绪会介绍如何使用artifactory来搭建团队内部的私有仓库。</p>
<h1 id="什么是jCenter"><a href="#什么是jCenter" class="headerlink" title="什么是jCenter"></a>什么是jCenter</h1><p>artifactory其实就是带有版本管理的文件服务器，基本功能和FTP服务相同，公开服务是jCenter，还提供托管的私有仓库，同github一样，提供企业收费服务，更多的功能，更快的下载速度。</p>
<p>开发者先将Library提交到自己的私有库，再同步到公共jCenter库，其它开发就可以简单的来添加依赖了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">compile <span class="string">'com.squareup.retrofit:retrofit:1.9.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/JCenter_architecture.png" alt="jCenter" title="">
                </div>
                </figure>
<p>在这个架构图中，还有一个maven central和ivy仓库，都提供类似的下载托管功能，但要么太老了，要么太少人使用。</p>
<p>再说下maven仓库引用的格式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.retrofit:retrofit:1.9.0'</span></div></pre></td></tr></table></figure></p>
<p>定义为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GROUP_ID:ARTIFACT_ID:VERSION</div></pre></td></tr></table></figure></p>
<p>GROUP_ID:com.squareup.retrofit，组，方便公司或团队进行逻辑上的管理。<br>ARTIFACT_ID:retrofit，Library名称。<br>VERSION:1.9.0，Library指定版本。<br>Module中的完整依赖：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="built_in">test</span>Compile <span class="string">'junit:junit:4.12'</span></div><div class="line">    compile <span class="string">'com.android.support:appcompat-v7:23.0.1'</span></div><div class="line">    compile <span class="string">'com.squareup.okhttp:okhttp-urlconnection:2.0.0'</span></div><div class="line">    compile <span class="string">'com.squareup.okhttp:okhttp:2.0.0'</span></div><div class="line">    compile <span class="string">'com.squareup.retrofit:retrofit:1.9.0'</span></div><div class="line">    compile <span class="string">'com.google.code.gson:gson:2.3'</span></div><div class="line">    compile <span class="string">'io.reactivex:rxjava:1.0.11'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>在依赖中不要使用动态版本号</em></strong><br>Gradle中支持使用<code>+</code>来引用动态版本，人生苦短，不要使用它！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:appcompat-v7:23.0.+'</span></div></pre></td></tr></table></figure></p>
<p>任何依赖的改变，你都应该被显式的知晓，以便知道自己的项目中有除了自己的代码，依赖都发生了哪些变化。<br>这个<code>+</code>，会大大增加你代码的不确定性！！<br>理由：</p>
<ul>
<li>依赖也是你应用的一部分，任何变更，都要知道。</li>
<li>每个人的开发不尽相同，在你的机器上可以运行，在其它机器上可能运行不起来，因为依赖版本不一样。</li>
<li>同样的，在你的机器上也会出现由于版本不同而运行失败，昨天好好的，今天怎么就跑不进来了？那是因为早晨另一个项目中升级了本地依赖！</li>
<li>版本回滚，显示的版本号支持精准的回滚。</li>
<li>不要自动依赖升级，任何依赖更新都有可能引入安全问题，回到第一点，任何变更，都要知道，升级要验证。</li>
</ul>
<p>不要犯懒，依赖管理很重要，程序开发过程就是消除不确定性的过程，一个<code>+</code>的犯懒，可能会让你和项目消耗极大的精力。<br>不要假设依赖总是好的，是人都会犯错误，任何的开发在减少不确定性的时候也同时在引入新的不确定性。</p>
<p>PS：jCenter不只支持maven和gradle,还提供Yum, Apt, Vagrant and Docker。</p>
<h1 id="Android-Studio为什么使用jCenter"><a href="#Android-Studio为什么使用jCenter" class="headerlink" title="Android Studio为什么使用jCenter"></a>Android Studio为什么使用jCenter</h1><p>Java的构建工具从ant,maven到现在的gradle，依赖包仓库也经历了maven central和jCenter，同样Android Studio中的Gradle默认仓库也经历了先使用maven central后来又升级到了jCenter的过程，简单来说：</p>
<ul>
<li>jCenter完全兼容maven，maven central中有的，jCenter有，maven central中没有的，jCenter也有，是maven central的超集，现在是全球包含Java和Android开源项目最大的仓库。</li>
<li>使用CDN加速下载，基于https安全传输，Google最喜欢的传输方式，杜绝在传输过程中偷梁换柱，造成类似xcodeghost的惨剧。</li>
<li>包的上传和管理操作更简便，流程更优（让包开发者更懒）</li>
<li>支持一键同步到maven central（尊重历史，还有什么理由不用）</li>
</ul>
<p>让gradle使用maven central（团队内部库/被jCenter拒了/偷懒不进jCenter）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>还有一种情况是使用私有Maven仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    maven &#123;</div><div class="line">        url  <span class="string">"http://dl.bintray.com/alphayang/maven"</span> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="发布到jCenter"><a href="#发布到jCenter" class="headerlink" title="发布到jCenter"></a>发布到jCenter</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="帐户"><a href="#帐户" class="headerlink" title="帐户"></a>帐户</h3><p>在<a href="https://bintray.com" target="_blank" rel="external">https://bintray.com</a>上注册，可使用github登陆。</p>
<h3 id="创建私有Maven仓库"><a href="#创建私有Maven仓库" class="headerlink" title="创建私有Maven仓库"></a>创建私有Maven仓库</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/create_maven_repo.png" alt="create_maven_repo" title="">
                </div>
                </figure>
<h3 id="添加Package"><a href="#添加Package" class="headerlink" title="添加Package"></a>添加Package</h3><p>新建包<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/add_new_package_to_maven_repo.png" alt="add_new_package_to_maven_repo" title="">
                </div>
                </figure><br>包名，License和代码码本管理必填。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/create_package_details.png" alt="create_package_details" title="">
                </div>
                </figure></p>
<h2 id="Andorid-Studio中的工作"><a href="#Andorid-Studio中的工作" class="headerlink" title="Andorid Studio中的工作"></a>Andorid Studio中的工作</h2><h3 id="New-Project"><a href="#New-Project" class="headerlink" title="New Project"></a>New Project</h3><p><code>File</code> -&gt; <code>New Project</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/new_project.png" alt="new_project" title="">
                </div>
                </figure><br>New Project默认都是先创建一个Application Module，正常创建就好，正好可以用来做Library的Demo App。</p>
<h3 id="New-Module"><a href="#New-Module" class="headerlink" title="New Module"></a>New Module</h3><p>创建Library Module<br><code>File</code> -&gt; <code>New Module</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/new_library.png" alt="new_library" title="">
                </div>
                </figure><br>新建的Library与正常的Application最大区别是module build.gradle中是apply plugin: ‘com.android.library’ 而不是 apply plugin: ‘com.android.application’。<br>在这里发挥才智实现功能。<br>完整的Project Structure:<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/project_structure.png" alt="project_structure" title="">
                </div>
                </figure></p>
<h3 id="添加上传的Gradle脚本支持"><a href="#添加上传的Gradle脚本支持" class="headerlink" title="添加上传的Gradle脚本支持"></a>添加上传的Gradle脚本支持</h3><p>在weatherlib/build.gradle中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.novoda.bintray-release'</span> // 这一行必须添加在java / com.android.library plugin之后</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.novoda:bintray-release:0.3.4'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在weatherlib/build.gradle中添加Package信息，当然这里的信息都是Package相关的，使用时要改成自己的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">publish &#123;</div><div class="line">    userOrg = <span class="string">'alphayang'</span></div><div class="line">    groupId = <span class="string">'com.geekdev'</span></div><div class="line">    artifactId = <span class="string">'weatherlib'</span></div><div class="line">    publishVersion = <span class="string">'0.2.5'</span></div><div class="line">    desc = <span class="string">'Simple ForecastIO client'</span></div><div class="line">    website = <span class="string">'https://github.com/alphayang/WeatherLibe'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p><code>⌘F9</code>，上传前Build下代码，确保正常。<br>然后在Terminal Panel中执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./gradlew clean build bintrayUpload -PbintrayUser=BINTRAY_USERNAME -PbintrayKey=BINTRAY_KEY -PdryRun=<span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p><code>BINTRAY_USERNAME</code>和<code>BINTRAY_KEY</code>在bintry profile页面获取，注意username不是name。<br><a href="https://bintray.com/profile/edit" target="_blank" rel="external">https://bintray.com/profile/edit</a></p>
<h3 id="发布成功"><a href="#发布成功" class="headerlink" title="发布成功"></a>发布成功</h3><p>在bintray界面：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/upload_done.png" alt="upload_done" title="">
                </div>
                </figure><br>上传的版本：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/library_version.png" alt="library_version" title="">
                </div>
                </figure><br>上传的文件列表：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/library_files_list.png" alt="file" title="">
                </div>
                </figure></p>
<h2 id="添加到jCenter公共仓库"><a href="#添加到jCenter公共仓库" class="headerlink" title="添加到jCenter公共仓库"></a>添加到jCenter公共仓库</h2><p>一键添加到jCenter<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/add_to_jcenter.png" alt="add" title="">
                </div>
                </figure><br>添加到jCenter公共仓库需要简单的人工审核<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/jCenter_approve_request.png" alt="approve" title="">
                </div>
                </figure><br>等几个小时，会有邮件通知审核结果。这个审核是必要的，公共仓库还是要有人把守，要不然鱼龙混杂，不好用了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/approve_result.png" alt="approve" title="">
                </div>
                </figure><br>OK了，你的包已经自动同步到jCenter，任何人可以公开获取使用了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/jCenter_files.png" alt="jcenter" title="">
                </div>
                </figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.geekdev:weatherlib:0.2.5'</span></div></pre></td></tr></table></figure></p>
<p><a href="http://jcenter.bintray.com/" target="_blank" rel="external">http://jcenter.bintray.com/</a>里有jCenter全部的公开库。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>jCenter是现在最好用公开Android库，对于使用还是使用者都提供了最好的使用体验。<br>BinTray开发一个artifactory提供三种形态：个人私有库，公开社区库和商业库，保证了整个业务的良性发展，也是这一类开发者服务最好的商业模式。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>由于Maven Central已经老去，从jCenter同步到Maven Central的步骤本文不做介绍了（同理ivy）。</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://blog.bintray.com/2015/02/09/android-studio-migration-from-maven-central-to-jcenter/" target="_blank" rel="external">Android Studio – Migration from Maven Central to JCenter</a><br><a href="https://github.com/novoda/bintray-release/blob/master/README.md" target="_blank" rel="external">bintray-release</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引论&quot;&gt;&lt;a href=&quot;#引论&quot; class=&quot;headerlink&quot; title=&quot;引论&quot;&gt;&lt;/a&gt;引论&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;http://alphayang.github.io/2015/10/17/all-about-aar/&quot; target
    
    </summary>
    
      <category term="develop" scheme="https://yangbo.tech/categories/develop/"/>
    
    
      <category term="Andorid" scheme="https://yangbo.tech/tags/Andorid/"/>
    
      <category term="Gradle" scheme="https://yangbo.tech/tags/Gradle/"/>
    
      <category term="Andorid Studio" scheme="https://yangbo.tech/tags/Andorid-Studio/"/>
    
  </entry>
  
  <entry>
    <title>如何在Android Studio Project中集中管理Android Support Library依赖</title>
    <link href="https://yangbo.tech/2015/10/18/support-library-group-in-gradle/"/>
    <id>https://yangbo.tech/2015/10/18/support-library-group-in-gradle/</id>
    <published>2015-10-18T13:33:52.000Z</published>
    <updated>2015-10-18T13:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>有时候一个Project中包含了好几个module，每个module都要用到Android Support Library，每当升级Support Library时要改好几处，相当麻烦。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root </div><div class="line">	--module1 </div><div class="line">		--build.gradle</div><div class="line">	--module2</div><div class="line">		--build.gradle</div><div class="line">	--module3 </div><div class="line">		--build.gradle </div><div class="line">	--build.gradle</div></pre></td></tr></table></figure></p>
<h1 id="利用Gradle的apply-from进行拆分"><a href="#利用Gradle的apply-from进行拆分" class="headerlink" title="利用Gradle的apply from进行拆分"></a>利用Gradle的apply from进行拆分</h1><p>Gradle基于Groovy脚本语言，本身使用Plugin机制提供扩展和模块化，也支持文件间的引用包含apply from，跟C的include,Java的import一样，那么我们就把Android Support Library相关的部分单独提取到root/gradleScript/dependencies.gradle中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root </div><div class="line">	--gradleScript </div><div class="line">		--dependencies.gradle</div><div class="line">	--module1 </div><div class="line">		--build.gradle</div><div class="line">	--module2</div><div class="line">		--build.gradle</div><div class="line">	--module3 </div><div class="line">		--build.gradle </div><div class="line">	--build.gradle</div></pre></td></tr></table></figure></p>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>在<code>root/gradleScript/dependencies.gradle</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    //Version</div><div class="line">    supportLibrary = &apos;22.2.0&apos;</div><div class="line"></div><div class="line">    //Support Libraries dependencies</div><div class="line">    supportDependencies = [</div><div class="line">            design           :    &quot;com.android.support:design:$&#123;supportLibrary&#125;&quot;,</div><div class="line">            recyclerView     :    &quot;com.android.support:recyclerview-v7:$&#123;supportLibrary&#125;&quot;,</div><div class="line">            cardView         :    &quot;com.android.support:cardview-v7:$&#123;supportLibrary&#125;&quot;,</div><div class="line">            appCompat        :    &quot;com.android.support:appcompat-v7:$&#123;supportLibrary&#125;&quot;,</div><div class="line">            supportAnnotation:    &quot;com.android.support:support-annotations:$&#123;supportLibrary&#125;&quot;,</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>root/build.gradle</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:1.3.0&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 引用gradle文件</div><div class="line">apply from: &apos;gradleScript/dependencies.gradle&apos;</div></pre></td></tr></table></figure></p>
<p>在<code>module/build.gradle</code>中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    //......</div><div class="line">    compile supportDependencies.appCompat</div><div class="line">    compile supportDependencies.design</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Gradle利用Grovvy，其动态脚本语言的特性，跟JavaScript一样，运行时将所有Plugin和自写代码载入到一个上下文中，Plugin可以看成是Groovy的一个jar包，独立出来的gradle文件是一个只有一个文件的jar包，其自身的扩展性潜力无限，这也是Android Studio选择Gradle Build System的原因。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;有时候一个Project中包含了好几个module，每个module都要用到Android Support Library，每当升级Supp
    
    </summary>
    
      <category term="develop" scheme="https://yangbo.tech/categories/develop/"/>
    
    
      <category term="Andorid" scheme="https://yangbo.tech/tags/Andorid/"/>
    
      <category term="Gradle" scheme="https://yangbo.tech/tags/Gradle/"/>
    
      <category term="Andorid Studio" scheme="https://yangbo.tech/tags/Andorid-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Android开发，关于aar你应该知道的</title>
    <link href="https://yangbo.tech/2015/10/17/all-about-aar/"/>
    <id>https://yangbo.tech/2015/10/17/all-about-aar/</id>
    <published>2015-10-17T11:45:17.000Z</published>
    <updated>2017-01-06T13:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在软件工程中，分治是最基本的设计原理，就如同现实中的砖、瓦、钢筋、水泥一样，模块化、组件化的分工，让我们整个软件世界变得井井有序，丰富多彩。</p>
<h2 id="Java-jar"><a href="#Java-jar" class="headerlink" title="Java jar"></a>Java jar</h2><p>在Java开发中，添加组件简单的以添加jar文件依赖为途径，jar有两个含义：</p>
<ul>
<li><a href="http://download.oracle.com/javase/6/docs/technotes/guides/jar/jarGuide.html" target="_blank" rel="external">jar文件格式</a>：Java Archive，就是zip文件格式，文件名后缀是jar，包含了java class，metadata，资源（文本、图片等）。</li>
<li>Java archive tool: JDK中的工具，用来生成jar包的工具。</li>
</ul>
<h2 id="jar在Android开发中的不足"><a href="#jar在Android开发中的不足" class="headerlink" title="jar在Android开发中的不足"></a>jar在Android开发中的不足</h2><p>在Android应用资源中，Java Source，Resouce以及所需的so文件和jar包，用jar格式可以很好的处理Java Source,但对于目录比较复杂的Android Res目录，二进制依赖so文件和jar包则显得的乏力。当你收到一个第三方SDK zip包，要添加到自己的项目中，解压后是一个jar包和一堆文件夹，不停的复制粘贴甚至解决冲突的时候，心里肯定开始不满意这血吸虫组件分发方式了。</p>
<h1 id="aar"><a href="#aar" class="headerlink" title="aar"></a>aar</h1><h2 id="什么是aar"><a href="#什么是aar" class="headerlink" title="什么是aar"></a>什么是aar</h2><p>为了解决Android开发中组件引用的问题，引入aar格式。也是简单的<strong>zip</strong>格式。<br>定义：The ‘aar’ bundle is the binary distribution of an Android Library Project.<br>Zip包中的内容有：</p>
<ul>
<li>/AndroidManifest.xml (mandatory)</li>
<li>/classes.jar (mandatory)</li>
<li>/res/ (mandatory)</li>
<li>/R.txt (mandatory)</li>
<li>/assets/ (optional)</li>
<li>/libs/*.jar (optional)</li>
<li>/jni/<abi>/*.so (optional)</abi></li>
<li>/proguard.txt (optional)</li>
<li>/lint.jar (optional)<br>其中，R.txt是aapt –output-text-symbols命令的输出。</li>
</ul>
<h2 id="生成aar"><a href="#生成aar" class="headerlink" title="生成aar"></a>生成aar</h2><p>在Android Studio1.4中，New project，先默认新建一个Applicaton module，接后<code>File</code> &gt; <code>New</code> &gt; <code>New Module</code>，选择<code>Androd Library</code> &gt; <code>Next</code>，指定Library Name和Module Name。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/new_android_library.png" alt="new" title="">
                </div>
                </figure><br>新建的Library与正常的Application最大区别是module build.gradle中是apply plugin: ‘com.android.library’ 而不是 apply plugin: ‘com.android.application’.</p>
<p><code>Build</code> &gt; <code>Make project</code>(⌘F9),自动生成aar文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| build</div><div class="line">	| outputs</div><div class="line">		| aar</div><div class="line">			| mylibrary-debug.aar</div><div class="line">			| mylibrary-release.aar</div></pre></td></tr></table></figure></p>
<h2 id="使用aar"><a href="#使用aar" class="headerlink" title="使用aar"></a>使用aar</h2><p>aar可通过以下三种方式引入到项目中：</p>
<ul>
<li>公共Maven仓库</li>
<li>私有Maven仓库</li>
<li>复制粘贴aar文件<br>前两种引入方式涉及到Gradle发布Library到Maven，另文介绍。<br>重点介绍第三种方式：</li>
<li>把aar粘贴到要引入库的Application Module/libs目录下，如没有libs目录，创建就好。注意要在Application Module根目录下，不是Project根目录下。</li>
<li>在Application Module/build.gradle中添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    flatDir &#123;</div><div class="line">        <span class="built_in">dirs</span> <span class="string">'libs'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://docs.gradle.org/current/userguide/dependency_management.html#sec:flat_dir_resolver" target="_blank" rel="external"><strong>flatDir repositories</strong></a>用来声明文件目录做为依赖库，’libs’路径是build.gradle的相对路径，目录名称可以任意，也可以同时声明多个dirs。</p>
<ul>
<li>在Application Module/build.gradle中添加依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile(name:<span class="string">'mylibrary-debug'</span>, ext:<span class="string">'aar'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="关于AndroidManifest-xml合并"><a href="#关于AndroidManifest-xml合并" class="headerlink" title="关于AndroidManifest.xml合并"></a>关于AndroidManifest.xml合并</h1><p>在上文中看到aar文件中还包含了库中的AndroidManifest.xml文件，但是最终应用APK中只能有一个AndroidManifest.xml，就涉及到应用AndroidManifest.xml和所有库AndroidManifest.xml的合并。</p>
<p>合并顺序：</p>
<ul>
<li>1.与Produt flavors和build types指定的清单文件</li>
<li>2.application module的主清单文件</li>
<li>3.library module的清单文件</li>
</ul>
<p>大多数情况下合并不会造成什么问题，如果发现合并后出现了问题：</p>
<ul>
<li>检查最终的AndroidManifest.xml</li>
<li>检查合并报告（app\build\outputs\logs\），<a href="http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger" target="_blank" rel="external">日志文件的格式和内容</a></li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本文中所用的项目代码托管在<a href="https://github.com/alphayang/LocalAARReference" target="_blank" rel="external">github</a>。</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p> AAR File Format<br><a href="http://tools.android.com/tech-docs/new-build-system/aar-format" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system/aar-format</a></p>
<p>Manifest merging user guide<br><a href="http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在软件工程中，分治是最基本的设计原理，就如同现实中的砖、瓦、钢筋、水泥一样，模块化、组件化的分工，让我们整个软件世界变得井井有序，丰富多彩。
    
    </summary>
    
      <category term="develop" scheme="https://yangbo.tech/categories/develop/"/>
    
    
      <category term="Andorid" scheme="https://yangbo.tech/tags/Andorid/"/>
    
      <category term="Gradle" scheme="https://yangbo.tech/tags/Gradle/"/>
    
      <category term="Andorid Studio" scheme="https://yangbo.tech/tags/Andorid-Studio/"/>
    
  </entry>
  
  <entry>
    <title>加速Android Studio中的Gradle Build</title>
    <link href="https://yangbo.tech/2015/10/16/speed-up-android-studio-build/"/>
    <id>https://yangbo.tech/2015/10/16/speed-up-android-studio-build/</id>
    <published>2015-10-16T06:45:17.000Z</published>
    <updated>2016-05-29T09:29:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Gradle Sync或Build越来越慢，已经快不能忍受了，硬件配置并不差呀！</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>两个方面：1，项目越来越大,依赖越来越多；2，Gradle本身为了兼容配置太中庸。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>针对1，将公用代码分离出来，以aar格式导出，使用时加本地aar或网络引用 。<br>2，对Gradle进行优化配置。</p>
<h2 id="升级gradle版本，此法向前向后兼容"><a href="#升级gradle版本，此法向前向后兼容" class="headerlink" title="升级gradle版本，此法向前向后兼容"></a>升级gradle版本，此法向前向后兼容</h2><p>现在Android Studio默认的Gradle版本为2.4，而最新的Gradle版本为2.7，稳妥起见，升级到次新版2.6</p>
<h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>添加下边的代码到project的build.gradle<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task wrapper(<span class="string">type:</span> Wrapper) &#123;</div><div class="line">    gradleVersion = <span class="string">'2.6'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Android Studio的Terminal中运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew wrapper</div></pre></td></tr></table></figure></p>
<p>或在Android Studio的Gradle Panel展开Project-&gt;Project(root)-&gt;Tasks-&gt;other,找见wrapper任务，单击执行。</p>
<h3 id="Project属性"><a href="#Project属性" class="headerlink" title="Project属性"></a>Project属性</h3><p>快捷键⌘+;打开项目属性，更新Gradle版本<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/project_structure_dialog.png" alt="project" title="">
                </div>
                </figure></p>
<h2 id="配置Gradle"><a href="#配置Gradle" class="headerlink" title="配置Gradle"></a>配置Gradle</h2><h3 id="Gradle运行期环境增强配置"><a href="#Gradle运行期环境增强配置" class="headerlink" title="Gradle运行期环境增强配置"></a>Gradle运行期环境增强配置</h3><p>在Project根目录下的gradle.properties文件中添加<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">org.gradle.daemon=<span class="literal">true</span></div><div class="line">org.gradle.parallel=<span class="literal">true</span></div><div class="line">org.gradle.jvmargs=-Xmx2g</div><div class="line">org.gradle.java.home=<span class="regexp">/path/</span>to/jvm</div></pre></td></tr></table></figure></p>
<p>Daemon,守护进程，避免冷启动，Andorid Studio已默认开启，添加确保在Terminal下使用gradlew也使用。更多<a href="http://gradle.org/docs/current/userguide/gradle_daemon.html#when_should_i_not_use_the_gradle_daemon" target="_blank" rel="external">http://gradle.org/docs/current/userguide/gradle_daemon.html#when_should_i_not_use_the_gradle_daemon</a><br>Parallel,并发，充分利用硬件的多核性能，可能会让你的项目Build失败，那是因为项目结构没有解藕。更多<a href="http://gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects" target="_blank" rel="external">http://gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</a><br>jvmargs，grovvy寄宿在jvm中运行，加大jvm的内存，给gradle更大的展现空间，比如-Xmx将heap size加大到2g，<br>java.home，使用与项目不同的java运行时，通常是Android开发使用JDK7，Gradle使用JDK8获得更好的性能。<br>Gradle的完整配置可以参考<a href="http://gradle.org/docs/current/userguide/userguide_single.html#sec:gradle_configuration_properties" target="_blank" rel="external">http://gradle.org/docs/current/userguide/userguide_single.html#sec:gradle_configuration_properties</a></p>
<p>这个配置同样可做为全局配置，添加到</p>
<ul>
<li><code>~/.gradle/gradle.properties</code></li>
</ul>
<h3 id="Gradle-Build增量模式"><a href="#Gradle-Build增量模式" class="headerlink" title="Gradle Build增量模式"></a>Gradle Build增量模式</h3><p>在Module的build.gradle中添加<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">...</div><div class="line">	dexOptions &#123;</div><div class="line">        incremental <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#123;</div></pre></td></tr></table></figure></p>
<p>指定APK的DEX环节使用增量模式。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>还不够快，你该升级你的硬件设备了！</p>
<h1 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h1><p>Gradle wrapper是如何工作的？<br>gradle作为一个独立的软件，之前都需要自己安装，像上边的过程中怎么只改了下数字，就全部搞定了呢？<br>如下图，Android Studio的Project中除了build.gradle,gradle.settings,gradle.properties之外，还有一个gradle目录。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/gradle_wrapper_folder.png" alt="gradle" title="">
                </div>
                </figure><br>这个jar文件只是一个钩子，每个project都有，调用功能时，由钩子调用实际的本地应用，位置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Downloads  ls ~/.gradle/wrapper/dists/gradle-</div><div class="line">gradle-1.8-bin/    gradle-2.2.1-all/  gradle-2.4-bin/    gradle-2.6-all/</div><div class="line">gradle-2.2-all/    gradle-2.4-all/    gradle-2.5-all/    gradle-2.7-all/</div></pre></td></tr></table></figure></p>
<p>而这些版本是全局共享的，我们升级版本，Android Studio会自动下载本地没有的版本到这里。</p>
<h1 id="更新20151205"><a href="#更新20151205" class="headerlink" title="更新20151205"></a>更新20151205</h1><h2 id="Gradle-最新版本为2-9"><a href="#Gradle-最新版本为2-9" class="headerlink" title="Gradle 最新版本为2.9"></a>Gradle 最新版本为2.9</h2><h2 id="升级-Android-Plugin"><a href="#升级-Android-Plugin" class="headerlink" title="升级 Android Plugin"></a>升级 Android Plugin</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">buildscrpt &#123;</div><div class="line">  dependencies &#123;</div><div class="line">    classpath &apos;com.android.tools.build:gradle:1.5.0&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="开发使用SDK-21"><a href="#开发使用SDK-21" class="headerlink" title="开发使用SDK=21"></a>开发使用SDK=21</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  productFlavors &#123;</div><div class="line">    dev &#123;</div><div class="line">        minSdkVersion 21</div><div class="line">    &#125;</div><div class="line">    prod &#123;</div><div class="line">        minSdkVersion 14</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原理：API&gt;=21，使用 ART，在 Build 时只做 class to dex，不做 mergeing dex，省时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;Gradle Sync或Build越来越慢，已经快不能忍受了，硬件配置并不差呀！&lt;/p&gt;
&lt;h1 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot;
    
    </summary>
    
      <category term="develop" scheme="https://yangbo.tech/categories/develop/"/>
    
    
      <category term="gradle" scheme="https://yangbo.tech/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio中Gradle依赖树查看</title>
    <link href="https://yangbo.tech/2015/10/15/gradle-dependence-tree/"/>
    <id>https://yangbo.tech/2015/10/15/gradle-dependence-tree/</id>
    <published>2015-10-15T02:24:23.000Z</published>
    <updated>2015-10-16T14:37:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在Andorid Studio中查看Gralde添加的依赖时，只有平行的一级，看不出任何从属关系，特别是出现依赖冲突的时候，在build.gralde中根据没有添加的包，怎么会出现冲突呢？真让人摸不着头脑。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/graldle_flat_dep_tree.png" alt="平行的依赖" title="">
                </div>
                </figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>在maven中提供了树形依赖来清晰的查看依赖关系<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn dependency:tree -Dverbose -Dincludes=commons-collections</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[INFO] [dependency:tree]</div><div class="line">[INFO] org.apache.maven.plugins:maven-dependency-plugin:maven-plugin:2.0-alpha-5-SNAPSHOT</div><div class="line">[INFO] +- org.apache.maven.reporting:maven-reporting-impl:jar:2.0.4:compile</div><div class="line">[INFO] |  \- commons-validator:commons-validator:jar:1.2.0:compile</div><div class="line">[INFO] |     \- commons-digester:commons-digester:jar:1.6:compile</div><div class="line">[INFO] |        \- (commons-collections:commons-collections:jar:2.1:compile - omitted <span class="keyword">for</span> conflict with 2.0)</div><div class="line">[INFO] \- org.apache.maven.doxia:doxia-site-renderer:jar:1.0-alpha-8:compile</div><div class="line">[INFO]    \- org.codehaus.plexus:plexus-velocity:jar:1.1.3:compile</div><div class="line">[INFO]       \- commons-collections:commons-collections:jar:2.0:compile</div></pre></td></tr></table></figure></p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在Gralde这里也可以达到相同的效果</p>
<h2 id="Gradle-Panel"><a href="#Gradle-Panel" class="headerlink" title="Gradle Panel"></a>Gradle Panel</h2><p>在Gradle Panel中打印,Project和Module都支持。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/gradle_panel.png" alt="Gradle" title="">
                </div>
                </figure><br>运行输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">12:02:24 PM: Executing external task <span class="string">'androidDependencies'</span>...</div><div class="line">:core:androidDependencies</div><div class="line">debug</div><div class="line">+--- LOCAL: libGoogleAnalyticsV2.jar</div><div class="line">+--- LOCAL: CWAC-SackOfViewsAdapter.jar</div><div class="line">+--- LOCAL: ushahidi_sdk-1.1.jar</div><div class="line">+--- com.android.support:support-v4:22.2.0</div><div class="line">|    \--- LOCAL: internal_impl-22.2.0.jar</div><div class="line">\--- com.google.android.gms:play-services:8.1.0</div><div class="line">     +--- com.google.android.gms:play-services-ads:8.1.0</div><div class="line">     |    +--- com.google.android.gms:play-services-basement:8.1.0</div><div class="line">......</div></pre></td></tr></table></figure></p>
<h2 id="项目层添加gradle脚本"><a href="#项目层添加gradle脚本" class="headerlink" title="项目层添加gradle脚本"></a>项目层添加gradle脚本</h2><p>在项目根目录下build.gradle中添加<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subprojects &#123;</div><div class="line">    task allDeps(<span class="string">type:</span> DependencyReportTask) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Android Studio Terminal下运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew allDeps</div></pre></td></tr></table></figure></p>
<p>可以得到全部依赖的树形结构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">androidJacocoAnt - The Jacoco ant tasks to use to get execute Gradle tasks.</div><div class="line">\--- org.jacoco:org.jacoco.ant:0.7.4.201502262128</div><div class="line">     +--- org.jacoco:org.jacoco.core:0.7.4.201502262128</div><div class="line">     |    \--- org.ow2.asm:asm-debug-all:5.0.1</div><div class="line">     +--- org.jacoco:org.jacoco.report:0.7.4.201502262128</div><div class="line">     |    +--- org.jacoco:org.jacoco.core:0.7.4.201502262128 (*)</div><div class="line">     |    \--- org.ow2.asm:asm-debug-all:5.0.1</div><div class="line">     \--- org.jacoco:org.jacoco.agent:0.7.4.201502262128</div></pre></td></tr></table></figure></p>
<p>打出出来的结果很长，也有很多重复的部分，由于不同的配置。<br>可以指定配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew allDeps --configuration default</div></pre></td></tr></table></figure></p>
<h2 id="使用Andorid-Studio-gradle-view-plugin"><a href="#使用Andorid-Studio-gradle-view-plugin" class="headerlink" title="使用Andorid Studio gradle view plugin"></a>使用Andorid Studio gradle view plugin</h2><p><a href="https://github.com/rholder/gradle-view" target="_blank" rel="external">gradle view plugin</a><br>体现了Android Studio基于Intellij平台的优势。<br>安装：Android Studio-&gt;Preferences-&gt;Plugins-&gt;Browser Repositories,搜索Gradle View安装。（如果显示或下载有问题，科学上网，你懂的）<br>结果：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://camo.githubusercontent.com/a225c529b7c49f449882f28647b46959e2094876/687474703a2f2f706c7567696e732e6a6574627261696e732e636f6d2f66696c65732f373135302f73637265656e73686f745f31343731302e706e67" alt="gradle" title="">
                </div>
                </figure></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>建议多种方法配合使用，脚本可搜索，但是每个项目需要自行添加，插件一劳永逸，可视化操作，但不支持搜索，当你要解决依赖冲突时，搜索是最快发现问题的途径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在Andorid Studio中查看Gralde添加的依赖时，只有平行的一级，看不出任何从属关系，特别是出现依赖冲突的时候，在build.g
    
    </summary>
    
    
      <category term="gradle" scheme="https://yangbo.tech/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Java，ruby，python包管理使用国内镜像</title>
    <link href="https://yangbo.tech/2015/10/14/package-manage-for-china/"/>
    <id>https://yangbo.tech/2015/10/14/package-manage-for-china/</id>
    <published>2015-10-14T02:24:23.000Z</published>
    <updated>2015-10-31T02:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<p> 针对国内的网络，下载依赖包是很头疼的事，下面是我的tweak:</p>
<h3 id="Java-Maven"><a href="#Java-Maven" class="headerlink" title="Java Maven"></a>Java Maven</h3><p>使用<a href="maven.oschina.net/help.html">oschina</a>提供的maven库。</p>
<p>gradle中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 设置 maven 库地址</div><div class="line">repositories &#123;  </div><div class="line">    maven &#123; url <span class="string">'http://maven.oschina.net/content/groups/public/'</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Ruby-Gem"><a href="#Ruby-Gem" class="headerlink" title="Ruby Gem"></a>Ruby Gem</h3><p>rubygems.org存放在s3上的资源极由于国内网络原因极不稳定，gem install rack或bundle install时让人抓狂。<br>使用taobao提供的gem源</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</div><div class="line">$ gem sources <span class="_">-l</span></div><div class="line">*** CURRENT SOURCES ***</div><div class="line"></div><div class="line">https://ruby.taobao.org</div><div class="line"><span class="comment"># 请确保只有 ruby.taobao.org</span></div><div class="line">$ gem install rails</div></pre></td></tr></table></figure>
<p>使用bundle时,在Gemfile里指定source:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> <span class="string">'http://ruby.taobao.org/'</span></div></pre></td></tr></table></figure>
<p>rvm使用taobao源，提供ruby安装速度</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed -i .bak <span class="string">'s!ftp.ruby-lang.org/pub/ruby!ruby.taobao.org/mirrors/ruby!'</span> <span class="variable">$rvm_path</span>/config/db</div></pre></td></tr></table></figure>
<h3 id="Python-Pip"><a href="#Python-Pip" class="headerlink" title="Python Pip"></a>Python Pip</h3><p>douban大量使用了python，也对社区做贡献，速度快。<br>直接使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -i http://pypi.douban.com/simple simplejson</div></pre></td></tr></table></figure>
<p>全局使用<br>vi ~/.pip/pip.conf</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">index-url = http://pypi.douban.com/simple</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 针对国内的网络，下载依赖包是很头疼的事，下面是我的tweak:&lt;/p&gt;
&lt;h3 id=&quot;Java-Maven&quot;&gt;&lt;a href=&quot;#Java-Maven&quot; class=&quot;headerlink&quot; title=&quot;Java Maven&quot;&gt;&lt;/a&gt;Java Maven&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="general" scheme="https://yangbo.tech/categories/general/"/>
    
    
      <category term="tools" scheme="https://yangbo.tech/tags/tools/"/>
    
  </entry>
  
</feed>
